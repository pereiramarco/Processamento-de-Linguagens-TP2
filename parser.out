Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Inicio
Rule 1     Inicio -> Variaveis Start Codigo
Rule 2     Start -> <empty>
Rule 3     Variaveis -> { Declaracoes }
Rule 4     Declaracoes -> Declaracoes Declaracao
Rule 5     Declaracoes -> <empty>
Rule 6     Declaracao -> Type ID ;
Rule 7     Declaracao -> Type ID = Expr ;
Rule 8     Declaracao -> Type Array ID ;
Rule 9     Type -> ID
Rule 10    Array -> [ INT ] ContArray
Rule 11    ContArray -> [ INT ]
Rule 12    ContArray -> <empty>
Rule 13    Expr -> Expr + Term
Rule 14    Expr -> Expr - Term
Rule 15    Expr -> Term
Rule 16    Term -> Term * Factor
Rule 17    Term -> Term / Factor
Rule 18    Term -> Term % Factor
Rule 19    Term -> Factor
Rule 20    Factor -> INT
Rule 21    Factor -> - INT
Rule 22    Factor -> FLOAT
Rule 23    Factor -> - FLOAT
Rule 24    Factor -> STRING
Rule 25    Factor -> CALL ID
Rule 26    Factor -> ID
Rule 27    Factor -> ID [ INT ] ArrayCol
Rule 28    ArrayCol -> [ INT ]
Rule 29    ArrayCol -> <empty>
Rule 30    Codigo -> Codigo Funcao
Rule 31    Codigo -> Codigo Instrucao
Rule 32    Codigo -> <empty>
Rule 33    Funcao -> DecFunc { Variaveis ListInstrucao EndFunc
Rule 34    DecFunc -> FUNC ID
Rule 35    EndFunc -> }
Rule 36    Ret -> RET Expr ;
Rule 37    ListInstrucao -> ListInstrucao Instrucao
Rule 38    ListInstrucao -> <empty>
Rule 39    Instrucao -> Atribuicao
Rule 40    Instrucao -> Leitura
Rule 41    Instrucao -> Escrita
Rule 42    Instrucao -> Condicao
Rule 43    Instrucao -> Ciclo
Rule 44    Instrucao -> Ret
Rule 45    Atribuicao -> Var = Expr ;
Rule 46    Var -> ID ContinuacaoVar
Rule 47    ContinuacaoVar -> [ INT ] ContContinuacaoVar
Rule 48    ContinuacaoVar -> <empty>
Rule 49    ContContinuacaoVar -> [ INT ]
Rule 50    ContContinuacaoVar -> <empty>
Rule 51    Leitura -> READ Var ;
Rule 52    Escrita -> WRITE Expr ;
Rule 53    Condicao -> IF ExprCond Do { ListInstrucao } ;
Rule 54    Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ;
Rule 55    Do -> DO
Rule 56    Else -> ELSE
Rule 57    ExprCond -> ExprCond & Cond
Rule 58    ExprCond -> ExprCond | Cond
Rule 59    ExprCond -> Cond
Rule 60    Cond -> Expr EQUAL Expr
Rule 61    Cond -> Expr NOTEQUAL Expr
Rule 62    Cond -> Expr BIGGER Expr
Rule 63    Cond -> Expr SMALLER Expr
Rule 64    Cond -> Expr BIGGEREQUAL Expr
Rule 65    Cond -> Expr SMALLEREQUAL Expr
Rule 66    Ciclo -> CicloWhile
Rule 67    Ciclo -> CicloRepeat
Rule 68    Ciclo -> CicloFor
Rule 69    CicloWhile -> While ExprCond Do { ListInstrucao }
Rule 70    While -> WHILE
Rule 71    CicloRepeat -> Repeat ListInstrucao Until ExprCond
Rule 72    Repeat -> REPEAT
Rule 73    Until -> UNTIL
Rule 74    CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
Rule 75    AtribuicaoInicial -> Atribuicao
Rule 76    EndCond -> ;

Terminals, with rules where they appear

%                    : 18
&                    : 57
(                    : 74
)                    : 74
*                    : 16
+                    : 13
-                    : 14 21 23
/                    : 17
;                    : 6 7 8 36 45 51 52 53 54 76
=                    : 7 45
BIGGER               : 62
BIGGEREQUAL          : 64
CALL                 : 25
DO                   : 55
ELSE                 : 56
EQUAL                : 60
FLOAT                : 22 23
FOR                  : 74
FUNC                 : 34
ID                   : 6 7 8 9 25 26 27 34 46
IF                   : 53 54
INT                  : 10 11 20 21 27 28 47 49
NOTEQUAL             : 61
READ                 : 51
REPEAT               : 72
RET                  : 36
SMALLER              : 63
SMALLEREQUAL         : 65
STRING               : 24
UNTIL                : 73
WHILE                : 70
WRITE                : 52
[                    : 10 11 27 28 47 49
]                    : 10 11 27 28 47 49
error                : 
{                    : 3 33 53 54 54 69 74
|                    : 58
}                    : 3 35 53 54 54 69 74

Nonterminals, with rules where they appear

Array                : 8
ArrayCol             : 27
Atribuicao           : 39 74 75
AtribuicaoInicial    : 74
Ciclo                : 43
CicloFor             : 68
CicloRepeat          : 67
CicloWhile           : 66
Codigo               : 1 30 31
Cond                 : 57 58 59
Condicao             : 42
ContArray            : 10
ContContinuacaoVar   : 47
ContinuacaoVar       : 46
DecFunc              : 33
Declaracao           : 4
Declaracoes          : 3 4
Do                   : 53 54 69
Else                 : 54
EndCond              : 74
EndFunc              : 33
Escrita              : 41
Expr                 : 7 13 14 36 45 52 60 60 61 61 62 62 63 63 64 64 65 65
ExprCond             : 53 54 57 58 69 71 74
Factor               : 16 17 18 19
Funcao               : 30
Inicio               : 0
Instrucao            : 31 37
Leitura              : 40
ListInstrucao        : 33 37 53 54 54 69 71 74
Repeat               : 71
Ret                  : 44
Start                : 1
Term                 : 13 14 15 16 17 18
Type                 : 6 7 8
Until                : 71
Var                  : 45 51
Variaveis            : 1 33
While                : 69

Parsing method: LALR

state 0

    (0) S' -> . Inicio
    (1) Inicio -> . Variaveis Start Codigo
    (3) Variaveis -> . { Declaracoes }

    {               shift and go to state 3

    Inicio                         shift and go to state 1
    Variaveis                      shift and go to state 2

state 1

    (0) S' -> Inicio .



state 2

    (1) Inicio -> Variaveis . Start Codigo
    (2) Start -> .

    FUNC            reduce using rule 2 (Start -> .)
    READ            reduce using rule 2 (Start -> .)
    WRITE           reduce using rule 2 (Start -> .)
    IF              reduce using rule 2 (Start -> .)
    RET             reduce using rule 2 (Start -> .)
    ID              reduce using rule 2 (Start -> .)
    FOR             reduce using rule 2 (Start -> .)
    WHILE           reduce using rule 2 (Start -> .)
    REPEAT          reduce using rule 2 (Start -> .)
    $end            reduce using rule 2 (Start -> .)

    Start                          shift and go to state 4

state 3

    (3) Variaveis -> { . Declaracoes }
    (4) Declaracoes -> . Declaracoes Declaracao
    (5) Declaracoes -> .

    }               reduce using rule 5 (Declaracoes -> .)
    ID              reduce using rule 5 (Declaracoes -> .)

    Declaracoes                    shift and go to state 5

state 4

    (1) Inicio -> Variaveis Start . Codigo
    (30) Codigo -> . Codigo Funcao
    (31) Codigo -> . Codigo Instrucao
    (32) Codigo -> .

    FUNC            reduce using rule 32 (Codigo -> .)
    READ            reduce using rule 32 (Codigo -> .)
    WRITE           reduce using rule 32 (Codigo -> .)
    IF              reduce using rule 32 (Codigo -> .)
    RET             reduce using rule 32 (Codigo -> .)
    ID              reduce using rule 32 (Codigo -> .)
    FOR             reduce using rule 32 (Codigo -> .)
    WHILE           reduce using rule 32 (Codigo -> .)
    REPEAT          reduce using rule 32 (Codigo -> .)
    $end            reduce using rule 32 (Codigo -> .)

    Codigo                         shift and go to state 6

state 5

    (3) Variaveis -> { Declaracoes . }
    (4) Declaracoes -> Declaracoes . Declaracao
    (6) Declaracao -> . Type ID ;
    (7) Declaracao -> . Type ID = Expr ;
    (8) Declaracao -> . Type Array ID ;
    (9) Type -> . ID

    }               shift and go to state 7
    ID              shift and go to state 10

    Declaracao                     shift and go to state 8
    Type                           shift and go to state 9

state 6

    (1) Inicio -> Variaveis Start Codigo .
    (30) Codigo -> Codigo . Funcao
    (31) Codigo -> Codigo . Instrucao
    (33) Funcao -> . DecFunc { Variaveis ListInstrucao EndFunc
    (39) Instrucao -> . Atribuicao
    (40) Instrucao -> . Leitura
    (41) Instrucao -> . Escrita
    (42) Instrucao -> . Condicao
    (43) Instrucao -> . Ciclo
    (44) Instrucao -> . Ret
    (34) DecFunc -> . FUNC ID
    (45) Atribuicao -> . Var = Expr ;
    (51) Leitura -> . READ Var ;
    (52) Escrita -> . WRITE Expr ;
    (53) Condicao -> . IF ExprCond Do { ListInstrucao } ;
    (54) Condicao -> . IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ;
    (66) Ciclo -> . CicloWhile
    (67) Ciclo -> . CicloRepeat
    (68) Ciclo -> . CicloFor
    (36) Ret -> . RET Expr ;
    (46) Var -> . ID ContinuacaoVar
    (69) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (71) CicloRepeat -> . Repeat ListInstrucao Until ExprCond
    (74) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (70) While -> . WHILE
    (72) Repeat -> . REPEAT

    $end            reduce using rule 1 (Inicio -> Variaveis Start Codigo .)
    FUNC            shift and go to state 20
    READ            shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    RET             shift and go to state 29
    ID              shift and go to state 21
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    REPEAT          shift and go to state 34

    Funcao                         shift and go to state 11
    Instrucao                      shift and go to state 12
    DecFunc                        shift and go to state 13
    Atribuicao                     shift and go to state 14
    Leitura                        shift and go to state 15
    Escrita                        shift and go to state 16
    Condicao                       shift and go to state 17
    Ciclo                          shift and go to state 18
    Ret                            shift and go to state 19
    Var                            shift and go to state 22
    CicloWhile                     shift and go to state 26
    CicloRepeat                    shift and go to state 27
    CicloFor                       shift and go to state 28
    While                          shift and go to state 30
    Repeat                         shift and go to state 31

state 7

    (3) Variaveis -> { Declaracoes } .

    FUNC            reduce using rule 3 (Variaveis -> { Declaracoes } .)
    READ            reduce using rule 3 (Variaveis -> { Declaracoes } .)
    WRITE           reduce using rule 3 (Variaveis -> { Declaracoes } .)
    IF              reduce using rule 3 (Variaveis -> { Declaracoes } .)
    RET             reduce using rule 3 (Variaveis -> { Declaracoes } .)
    ID              reduce using rule 3 (Variaveis -> { Declaracoes } .)
    FOR             reduce using rule 3 (Variaveis -> { Declaracoes } .)
    WHILE           reduce using rule 3 (Variaveis -> { Declaracoes } .)
    REPEAT          reduce using rule 3 (Variaveis -> { Declaracoes } .)
    $end            reduce using rule 3 (Variaveis -> { Declaracoes } .)
    }               reduce using rule 3 (Variaveis -> { Declaracoes } .)


state 8

    (4) Declaracoes -> Declaracoes Declaracao .

    }               reduce using rule 4 (Declaracoes -> Declaracoes Declaracao .)
    ID              reduce using rule 4 (Declaracoes -> Declaracoes Declaracao .)


state 9

    (6) Declaracao -> Type . ID ;
    (7) Declaracao -> Type . ID = Expr ;
    (8) Declaracao -> Type . Array ID ;
    (10) Array -> . [ INT ] ContArray

    ID              shift and go to state 35
    [               shift and go to state 37

    Array                          shift and go to state 36

state 10

    (9) Type -> ID .

    ID              reduce using rule 9 (Type -> ID .)
    [               reduce using rule 9 (Type -> ID .)


state 11

    (30) Codigo -> Codigo Funcao .

    FUNC            reduce using rule 30 (Codigo -> Codigo Funcao .)
    READ            reduce using rule 30 (Codigo -> Codigo Funcao .)
    WRITE           reduce using rule 30 (Codigo -> Codigo Funcao .)
    IF              reduce using rule 30 (Codigo -> Codigo Funcao .)
    RET             reduce using rule 30 (Codigo -> Codigo Funcao .)
    ID              reduce using rule 30 (Codigo -> Codigo Funcao .)
    FOR             reduce using rule 30 (Codigo -> Codigo Funcao .)
    WHILE           reduce using rule 30 (Codigo -> Codigo Funcao .)
    REPEAT          reduce using rule 30 (Codigo -> Codigo Funcao .)
    $end            reduce using rule 30 (Codigo -> Codigo Funcao .)


state 12

    (31) Codigo -> Codigo Instrucao .

    FUNC            reduce using rule 31 (Codigo -> Codigo Instrucao .)
    READ            reduce using rule 31 (Codigo -> Codigo Instrucao .)
    WRITE           reduce using rule 31 (Codigo -> Codigo Instrucao .)
    IF              reduce using rule 31 (Codigo -> Codigo Instrucao .)
    RET             reduce using rule 31 (Codigo -> Codigo Instrucao .)
    ID              reduce using rule 31 (Codigo -> Codigo Instrucao .)
    FOR             reduce using rule 31 (Codigo -> Codigo Instrucao .)
    WHILE           reduce using rule 31 (Codigo -> Codigo Instrucao .)
    REPEAT          reduce using rule 31 (Codigo -> Codigo Instrucao .)
    $end            reduce using rule 31 (Codigo -> Codigo Instrucao .)


state 13

    (33) Funcao -> DecFunc . { Variaveis ListInstrucao EndFunc

    {               shift and go to state 38


state 14

    (39) Instrucao -> Atribuicao .

    FUNC            reduce using rule 39 (Instrucao -> Atribuicao .)
    READ            reduce using rule 39 (Instrucao -> Atribuicao .)
    WRITE           reduce using rule 39 (Instrucao -> Atribuicao .)
    IF              reduce using rule 39 (Instrucao -> Atribuicao .)
    RET             reduce using rule 39 (Instrucao -> Atribuicao .)
    ID              reduce using rule 39 (Instrucao -> Atribuicao .)
    FOR             reduce using rule 39 (Instrucao -> Atribuicao .)
    WHILE           reduce using rule 39 (Instrucao -> Atribuicao .)
    REPEAT          reduce using rule 39 (Instrucao -> Atribuicao .)
    $end            reduce using rule 39 (Instrucao -> Atribuicao .)
    UNTIL           reduce using rule 39 (Instrucao -> Atribuicao .)
    }               reduce using rule 39 (Instrucao -> Atribuicao .)


state 15

    (40) Instrucao -> Leitura .

    FUNC            reduce using rule 40 (Instrucao -> Leitura .)
    READ            reduce using rule 40 (Instrucao -> Leitura .)
    WRITE           reduce using rule 40 (Instrucao -> Leitura .)
    IF              reduce using rule 40 (Instrucao -> Leitura .)
    RET             reduce using rule 40 (Instrucao -> Leitura .)
    ID              reduce using rule 40 (Instrucao -> Leitura .)
    FOR             reduce using rule 40 (Instrucao -> Leitura .)
    WHILE           reduce using rule 40 (Instrucao -> Leitura .)
    REPEAT          reduce using rule 40 (Instrucao -> Leitura .)
    $end            reduce using rule 40 (Instrucao -> Leitura .)
    UNTIL           reduce using rule 40 (Instrucao -> Leitura .)
    }               reduce using rule 40 (Instrucao -> Leitura .)


state 16

    (41) Instrucao -> Escrita .

    FUNC            reduce using rule 41 (Instrucao -> Escrita .)
    READ            reduce using rule 41 (Instrucao -> Escrita .)
    WRITE           reduce using rule 41 (Instrucao -> Escrita .)
    IF              reduce using rule 41 (Instrucao -> Escrita .)
    RET             reduce using rule 41 (Instrucao -> Escrita .)
    ID              reduce using rule 41 (Instrucao -> Escrita .)
    FOR             reduce using rule 41 (Instrucao -> Escrita .)
    WHILE           reduce using rule 41 (Instrucao -> Escrita .)
    REPEAT          reduce using rule 41 (Instrucao -> Escrita .)
    $end            reduce using rule 41 (Instrucao -> Escrita .)
    UNTIL           reduce using rule 41 (Instrucao -> Escrita .)
    }               reduce using rule 41 (Instrucao -> Escrita .)


state 17

    (42) Instrucao -> Condicao .

    FUNC            reduce using rule 42 (Instrucao -> Condicao .)
    READ            reduce using rule 42 (Instrucao -> Condicao .)
    WRITE           reduce using rule 42 (Instrucao -> Condicao .)
    IF              reduce using rule 42 (Instrucao -> Condicao .)
    RET             reduce using rule 42 (Instrucao -> Condicao .)
    ID              reduce using rule 42 (Instrucao -> Condicao .)
    FOR             reduce using rule 42 (Instrucao -> Condicao .)
    WHILE           reduce using rule 42 (Instrucao -> Condicao .)
    REPEAT          reduce using rule 42 (Instrucao -> Condicao .)
    $end            reduce using rule 42 (Instrucao -> Condicao .)
    UNTIL           reduce using rule 42 (Instrucao -> Condicao .)
    }               reduce using rule 42 (Instrucao -> Condicao .)


state 18

    (43) Instrucao -> Ciclo .

    FUNC            reduce using rule 43 (Instrucao -> Ciclo .)
    READ            reduce using rule 43 (Instrucao -> Ciclo .)
    WRITE           reduce using rule 43 (Instrucao -> Ciclo .)
    IF              reduce using rule 43 (Instrucao -> Ciclo .)
    RET             reduce using rule 43 (Instrucao -> Ciclo .)
    ID              reduce using rule 43 (Instrucao -> Ciclo .)
    FOR             reduce using rule 43 (Instrucao -> Ciclo .)
    WHILE           reduce using rule 43 (Instrucao -> Ciclo .)
    REPEAT          reduce using rule 43 (Instrucao -> Ciclo .)
    $end            reduce using rule 43 (Instrucao -> Ciclo .)
    UNTIL           reduce using rule 43 (Instrucao -> Ciclo .)
    }               reduce using rule 43 (Instrucao -> Ciclo .)


state 19

    (44) Instrucao -> Ret .

    FUNC            reduce using rule 44 (Instrucao -> Ret .)
    READ            reduce using rule 44 (Instrucao -> Ret .)
    WRITE           reduce using rule 44 (Instrucao -> Ret .)
    IF              reduce using rule 44 (Instrucao -> Ret .)
    RET             reduce using rule 44 (Instrucao -> Ret .)
    ID              reduce using rule 44 (Instrucao -> Ret .)
    FOR             reduce using rule 44 (Instrucao -> Ret .)
    WHILE           reduce using rule 44 (Instrucao -> Ret .)
    REPEAT          reduce using rule 44 (Instrucao -> Ret .)
    $end            reduce using rule 44 (Instrucao -> Ret .)
    UNTIL           reduce using rule 44 (Instrucao -> Ret .)
    }               reduce using rule 44 (Instrucao -> Ret .)


state 20

    (34) DecFunc -> FUNC . ID

    ID              shift and go to state 39


state 21

    (46) Var -> ID . ContinuacaoVar
    (47) ContinuacaoVar -> . [ INT ] ContContinuacaoVar
    (48) ContinuacaoVar -> .

    [               shift and go to state 41
    =               reduce using rule 48 (ContinuacaoVar -> .)
    ;               reduce using rule 48 (ContinuacaoVar -> .)

    ContinuacaoVar                 shift and go to state 40

state 22

    (45) Atribuicao -> Var . = Expr ;

    =               shift and go to state 42


state 23

    (51) Leitura -> READ . Var ;
    (46) Var -> . ID ContinuacaoVar

    ID              shift and go to state 21

    Var                            shift and go to state 43

state 24

    (52) Escrita -> WRITE . Expr ;
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Expr                           shift and go to state 44
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 25

    (53) Condicao -> IF . ExprCond Do { ListInstrucao } ;
    (54) Condicao -> IF . ExprCond Do { ListInstrucao } Else { ListInstrucao } ;
    (57) ExprCond -> . ExprCond & Cond
    (58) ExprCond -> . ExprCond | Cond
    (59) ExprCond -> . Cond
    (60) Cond -> . Expr EQUAL Expr
    (61) Cond -> . Expr NOTEQUAL Expr
    (62) Cond -> . Expr BIGGER Expr
    (63) Cond -> . Expr SMALLER Expr
    (64) Cond -> . Expr BIGGEREQUAL Expr
    (65) Cond -> . Expr SMALLEREQUAL Expr
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    ExprCond                       shift and go to state 53
    Cond                           shift and go to state 54
    Expr                           shift and go to state 55
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 26

    (66) Ciclo -> CicloWhile .

    FUNC            reduce using rule 66 (Ciclo -> CicloWhile .)
    READ            reduce using rule 66 (Ciclo -> CicloWhile .)
    WRITE           reduce using rule 66 (Ciclo -> CicloWhile .)
    IF              reduce using rule 66 (Ciclo -> CicloWhile .)
    RET             reduce using rule 66 (Ciclo -> CicloWhile .)
    ID              reduce using rule 66 (Ciclo -> CicloWhile .)
    FOR             reduce using rule 66 (Ciclo -> CicloWhile .)
    WHILE           reduce using rule 66 (Ciclo -> CicloWhile .)
    REPEAT          reduce using rule 66 (Ciclo -> CicloWhile .)
    $end            reduce using rule 66 (Ciclo -> CicloWhile .)
    UNTIL           reduce using rule 66 (Ciclo -> CicloWhile .)
    }               reduce using rule 66 (Ciclo -> CicloWhile .)


state 27

    (67) Ciclo -> CicloRepeat .

    FUNC            reduce using rule 67 (Ciclo -> CicloRepeat .)
    READ            reduce using rule 67 (Ciclo -> CicloRepeat .)
    WRITE           reduce using rule 67 (Ciclo -> CicloRepeat .)
    IF              reduce using rule 67 (Ciclo -> CicloRepeat .)
    RET             reduce using rule 67 (Ciclo -> CicloRepeat .)
    ID              reduce using rule 67 (Ciclo -> CicloRepeat .)
    FOR             reduce using rule 67 (Ciclo -> CicloRepeat .)
    WHILE           reduce using rule 67 (Ciclo -> CicloRepeat .)
    REPEAT          reduce using rule 67 (Ciclo -> CicloRepeat .)
    $end            reduce using rule 67 (Ciclo -> CicloRepeat .)
    UNTIL           reduce using rule 67 (Ciclo -> CicloRepeat .)
    }               reduce using rule 67 (Ciclo -> CicloRepeat .)


state 28

    (68) Ciclo -> CicloFor .

    FUNC            reduce using rule 68 (Ciclo -> CicloFor .)
    READ            reduce using rule 68 (Ciclo -> CicloFor .)
    WRITE           reduce using rule 68 (Ciclo -> CicloFor .)
    IF              reduce using rule 68 (Ciclo -> CicloFor .)
    RET             reduce using rule 68 (Ciclo -> CicloFor .)
    ID              reduce using rule 68 (Ciclo -> CicloFor .)
    FOR             reduce using rule 68 (Ciclo -> CicloFor .)
    WHILE           reduce using rule 68 (Ciclo -> CicloFor .)
    REPEAT          reduce using rule 68 (Ciclo -> CicloFor .)
    $end            reduce using rule 68 (Ciclo -> CicloFor .)
    UNTIL           reduce using rule 68 (Ciclo -> CicloFor .)
    }               reduce using rule 68 (Ciclo -> CicloFor .)


state 29

    (36) Ret -> RET . Expr ;
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Expr                           shift and go to state 56
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 30

    (69) CicloWhile -> While . ExprCond Do { ListInstrucao }
    (57) ExprCond -> . ExprCond & Cond
    (58) ExprCond -> . ExprCond | Cond
    (59) ExprCond -> . Cond
    (60) Cond -> . Expr EQUAL Expr
    (61) Cond -> . Expr NOTEQUAL Expr
    (62) Cond -> . Expr BIGGER Expr
    (63) Cond -> . Expr SMALLER Expr
    (64) Cond -> . Expr BIGGEREQUAL Expr
    (65) Cond -> . Expr SMALLEREQUAL Expr
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    ExprCond                       shift and go to state 57
    Cond                           shift and go to state 54
    Expr                           shift and go to state 55
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 31

    (71) CicloRepeat -> Repeat . ListInstrucao Until ExprCond
    (37) ListInstrucao -> . ListInstrucao Instrucao
    (38) ListInstrucao -> .

    UNTIL           reduce using rule 38 (ListInstrucao -> .)
    READ            reduce using rule 38 (ListInstrucao -> .)
    WRITE           reduce using rule 38 (ListInstrucao -> .)
    IF              reduce using rule 38 (ListInstrucao -> .)
    RET             reduce using rule 38 (ListInstrucao -> .)
    ID              reduce using rule 38 (ListInstrucao -> .)
    FOR             reduce using rule 38 (ListInstrucao -> .)
    WHILE           reduce using rule 38 (ListInstrucao -> .)
    REPEAT          reduce using rule 38 (ListInstrucao -> .)

    ListInstrucao                  shift and go to state 58

state 32

    (74) CicloFor -> FOR . ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }

    (               shift and go to state 59


state 33

    (70) While -> WHILE .

    INT             reduce using rule 70 (While -> WHILE .)
    -               reduce using rule 70 (While -> WHILE .)
    FLOAT           reduce using rule 70 (While -> WHILE .)
    STRING          reduce using rule 70 (While -> WHILE .)
    CALL            reduce using rule 70 (While -> WHILE .)
    ID              reduce using rule 70 (While -> WHILE .)


state 34

    (72) Repeat -> REPEAT .

    UNTIL           reduce using rule 72 (Repeat -> REPEAT .)
    READ            reduce using rule 72 (Repeat -> REPEAT .)
    WRITE           reduce using rule 72 (Repeat -> REPEAT .)
    IF              reduce using rule 72 (Repeat -> REPEAT .)
    RET             reduce using rule 72 (Repeat -> REPEAT .)
    ID              reduce using rule 72 (Repeat -> REPEAT .)
    FOR             reduce using rule 72 (Repeat -> REPEAT .)
    WHILE           reduce using rule 72 (Repeat -> REPEAT .)
    REPEAT          reduce using rule 72 (Repeat -> REPEAT .)


state 35

    (6) Declaracao -> Type ID . ;
    (7) Declaracao -> Type ID . = Expr ;

    ;               shift and go to state 60
    =               shift and go to state 61


state 36

    (8) Declaracao -> Type Array . ID ;

    ID              shift and go to state 62


state 37

    (10) Array -> [ . INT ] ContArray

    INT             shift and go to state 63


state 38

    (33) Funcao -> DecFunc { . Variaveis ListInstrucao EndFunc
    (3) Variaveis -> . { Declaracoes }

    {               shift and go to state 3

    Variaveis                      shift and go to state 64

state 39

    (34) DecFunc -> FUNC ID .

    {               reduce using rule 34 (DecFunc -> FUNC ID .)


state 40

    (46) Var -> ID ContinuacaoVar .

    =               reduce using rule 46 (Var -> ID ContinuacaoVar .)
    ;               reduce using rule 46 (Var -> ID ContinuacaoVar .)


state 41

    (47) ContinuacaoVar -> [ . INT ] ContContinuacaoVar

    INT             shift and go to state 65


state 42

    (45) Atribuicao -> Var = . Expr ;
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Expr                           shift and go to state 66
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 43

    (51) Leitura -> READ Var . ;

    ;               shift and go to state 67


state 44

    (52) Escrita -> WRITE Expr . ;
    (13) Expr -> Expr . + Term
    (14) Expr -> Expr . - Term

    ;               shift and go to state 68
    +               shift and go to state 69
    -               shift and go to state 70


state 45

    (15) Expr -> Term .
    (16) Term -> Term . * Factor
    (17) Term -> Term . / Factor
    (18) Term -> Term . % Factor

    ;               reduce using rule 15 (Expr -> Term .)
    +               reduce using rule 15 (Expr -> Term .)
    -               reduce using rule 15 (Expr -> Term .)
    EQUAL           reduce using rule 15 (Expr -> Term .)
    NOTEQUAL        reduce using rule 15 (Expr -> Term .)
    BIGGER          reduce using rule 15 (Expr -> Term .)
    SMALLER         reduce using rule 15 (Expr -> Term .)
    BIGGEREQUAL     reduce using rule 15 (Expr -> Term .)
    SMALLEREQUAL    reduce using rule 15 (Expr -> Term .)
    &               reduce using rule 15 (Expr -> Term .)
    |               reduce using rule 15 (Expr -> Term .)
    DO              reduce using rule 15 (Expr -> Term .)
    FUNC            reduce using rule 15 (Expr -> Term .)
    READ            reduce using rule 15 (Expr -> Term .)
    WRITE           reduce using rule 15 (Expr -> Term .)
    IF              reduce using rule 15 (Expr -> Term .)
    RET             reduce using rule 15 (Expr -> Term .)
    ID              reduce using rule 15 (Expr -> Term .)
    FOR             reduce using rule 15 (Expr -> Term .)
    WHILE           reduce using rule 15 (Expr -> Term .)
    REPEAT          reduce using rule 15 (Expr -> Term .)
    $end            reduce using rule 15 (Expr -> Term .)
    UNTIL           reduce using rule 15 (Expr -> Term .)
    }               reduce using rule 15 (Expr -> Term .)
    *               shift and go to state 71
    /               shift and go to state 72
    %               shift and go to state 73


state 46

    (21) Factor -> - . INT
    (23) Factor -> - . FLOAT

    INT             shift and go to state 74
    FLOAT           shift and go to state 75


state 47

    (19) Term -> Factor .

    *               reduce using rule 19 (Term -> Factor .)
    /               reduce using rule 19 (Term -> Factor .)
    %               reduce using rule 19 (Term -> Factor .)
    ;               reduce using rule 19 (Term -> Factor .)
    +               reduce using rule 19 (Term -> Factor .)
    -               reduce using rule 19 (Term -> Factor .)
    EQUAL           reduce using rule 19 (Term -> Factor .)
    NOTEQUAL        reduce using rule 19 (Term -> Factor .)
    BIGGER          reduce using rule 19 (Term -> Factor .)
    SMALLER         reduce using rule 19 (Term -> Factor .)
    BIGGEREQUAL     reduce using rule 19 (Term -> Factor .)
    SMALLEREQUAL    reduce using rule 19 (Term -> Factor .)
    &               reduce using rule 19 (Term -> Factor .)
    |               reduce using rule 19 (Term -> Factor .)
    DO              reduce using rule 19 (Term -> Factor .)
    FUNC            reduce using rule 19 (Term -> Factor .)
    READ            reduce using rule 19 (Term -> Factor .)
    WRITE           reduce using rule 19 (Term -> Factor .)
    IF              reduce using rule 19 (Term -> Factor .)
    RET             reduce using rule 19 (Term -> Factor .)
    ID              reduce using rule 19 (Term -> Factor .)
    FOR             reduce using rule 19 (Term -> Factor .)
    WHILE           reduce using rule 19 (Term -> Factor .)
    REPEAT          reduce using rule 19 (Term -> Factor .)
    $end            reduce using rule 19 (Term -> Factor .)
    UNTIL           reduce using rule 19 (Term -> Factor .)
    }               reduce using rule 19 (Term -> Factor .)


state 48

    (20) Factor -> INT .

    *               reduce using rule 20 (Factor -> INT .)
    /               reduce using rule 20 (Factor -> INT .)
    %               reduce using rule 20 (Factor -> INT .)
    ;               reduce using rule 20 (Factor -> INT .)
    +               reduce using rule 20 (Factor -> INT .)
    -               reduce using rule 20 (Factor -> INT .)
    EQUAL           reduce using rule 20 (Factor -> INT .)
    NOTEQUAL        reduce using rule 20 (Factor -> INT .)
    BIGGER          reduce using rule 20 (Factor -> INT .)
    SMALLER         reduce using rule 20 (Factor -> INT .)
    BIGGEREQUAL     reduce using rule 20 (Factor -> INT .)
    SMALLEREQUAL    reduce using rule 20 (Factor -> INT .)
    &               reduce using rule 20 (Factor -> INT .)
    |               reduce using rule 20 (Factor -> INT .)
    DO              reduce using rule 20 (Factor -> INT .)
    FUNC            reduce using rule 20 (Factor -> INT .)
    READ            reduce using rule 20 (Factor -> INT .)
    WRITE           reduce using rule 20 (Factor -> INT .)
    IF              reduce using rule 20 (Factor -> INT .)
    RET             reduce using rule 20 (Factor -> INT .)
    ID              reduce using rule 20 (Factor -> INT .)
    FOR             reduce using rule 20 (Factor -> INT .)
    WHILE           reduce using rule 20 (Factor -> INT .)
    REPEAT          reduce using rule 20 (Factor -> INT .)
    $end            reduce using rule 20 (Factor -> INT .)
    UNTIL           reduce using rule 20 (Factor -> INT .)
    }               reduce using rule 20 (Factor -> INT .)


state 49

    (22) Factor -> FLOAT .

    *               reduce using rule 22 (Factor -> FLOAT .)
    /               reduce using rule 22 (Factor -> FLOAT .)
    %               reduce using rule 22 (Factor -> FLOAT .)
    ;               reduce using rule 22 (Factor -> FLOAT .)
    +               reduce using rule 22 (Factor -> FLOAT .)
    -               reduce using rule 22 (Factor -> FLOAT .)
    EQUAL           reduce using rule 22 (Factor -> FLOAT .)
    NOTEQUAL        reduce using rule 22 (Factor -> FLOAT .)
    BIGGER          reduce using rule 22 (Factor -> FLOAT .)
    SMALLER         reduce using rule 22 (Factor -> FLOAT .)
    BIGGEREQUAL     reduce using rule 22 (Factor -> FLOAT .)
    SMALLEREQUAL    reduce using rule 22 (Factor -> FLOAT .)
    &               reduce using rule 22 (Factor -> FLOAT .)
    |               reduce using rule 22 (Factor -> FLOAT .)
    DO              reduce using rule 22 (Factor -> FLOAT .)
    FUNC            reduce using rule 22 (Factor -> FLOAT .)
    READ            reduce using rule 22 (Factor -> FLOAT .)
    WRITE           reduce using rule 22 (Factor -> FLOAT .)
    IF              reduce using rule 22 (Factor -> FLOAT .)
    RET             reduce using rule 22 (Factor -> FLOAT .)
    ID              reduce using rule 22 (Factor -> FLOAT .)
    FOR             reduce using rule 22 (Factor -> FLOAT .)
    WHILE           reduce using rule 22 (Factor -> FLOAT .)
    REPEAT          reduce using rule 22 (Factor -> FLOAT .)
    $end            reduce using rule 22 (Factor -> FLOAT .)
    UNTIL           reduce using rule 22 (Factor -> FLOAT .)
    }               reduce using rule 22 (Factor -> FLOAT .)


state 50

    (24) Factor -> STRING .

    *               reduce using rule 24 (Factor -> STRING .)
    /               reduce using rule 24 (Factor -> STRING .)
    %               reduce using rule 24 (Factor -> STRING .)
    ;               reduce using rule 24 (Factor -> STRING .)
    +               reduce using rule 24 (Factor -> STRING .)
    -               reduce using rule 24 (Factor -> STRING .)
    EQUAL           reduce using rule 24 (Factor -> STRING .)
    NOTEQUAL        reduce using rule 24 (Factor -> STRING .)
    BIGGER          reduce using rule 24 (Factor -> STRING .)
    SMALLER         reduce using rule 24 (Factor -> STRING .)
    BIGGEREQUAL     reduce using rule 24 (Factor -> STRING .)
    SMALLEREQUAL    reduce using rule 24 (Factor -> STRING .)
    &               reduce using rule 24 (Factor -> STRING .)
    |               reduce using rule 24 (Factor -> STRING .)
    DO              reduce using rule 24 (Factor -> STRING .)
    FUNC            reduce using rule 24 (Factor -> STRING .)
    READ            reduce using rule 24 (Factor -> STRING .)
    WRITE           reduce using rule 24 (Factor -> STRING .)
    IF              reduce using rule 24 (Factor -> STRING .)
    RET             reduce using rule 24 (Factor -> STRING .)
    ID              reduce using rule 24 (Factor -> STRING .)
    FOR             reduce using rule 24 (Factor -> STRING .)
    WHILE           reduce using rule 24 (Factor -> STRING .)
    REPEAT          reduce using rule 24 (Factor -> STRING .)
    $end            reduce using rule 24 (Factor -> STRING .)
    UNTIL           reduce using rule 24 (Factor -> STRING .)
    }               reduce using rule 24 (Factor -> STRING .)


state 51

    (25) Factor -> CALL . ID

    ID              shift and go to state 76


state 52

    (26) Factor -> ID .
    (27) Factor -> ID . [ INT ] ArrayCol

    *               reduce using rule 26 (Factor -> ID .)
    /               reduce using rule 26 (Factor -> ID .)
    %               reduce using rule 26 (Factor -> ID .)
    ;               reduce using rule 26 (Factor -> ID .)
    +               reduce using rule 26 (Factor -> ID .)
    -               reduce using rule 26 (Factor -> ID .)
    EQUAL           reduce using rule 26 (Factor -> ID .)
    NOTEQUAL        reduce using rule 26 (Factor -> ID .)
    BIGGER          reduce using rule 26 (Factor -> ID .)
    SMALLER         reduce using rule 26 (Factor -> ID .)
    BIGGEREQUAL     reduce using rule 26 (Factor -> ID .)
    SMALLEREQUAL    reduce using rule 26 (Factor -> ID .)
    &               reduce using rule 26 (Factor -> ID .)
    |               reduce using rule 26 (Factor -> ID .)
    DO              reduce using rule 26 (Factor -> ID .)
    FUNC            reduce using rule 26 (Factor -> ID .)
    READ            reduce using rule 26 (Factor -> ID .)
    WRITE           reduce using rule 26 (Factor -> ID .)
    IF              reduce using rule 26 (Factor -> ID .)
    RET             reduce using rule 26 (Factor -> ID .)
    ID              reduce using rule 26 (Factor -> ID .)
    FOR             reduce using rule 26 (Factor -> ID .)
    WHILE           reduce using rule 26 (Factor -> ID .)
    REPEAT          reduce using rule 26 (Factor -> ID .)
    $end            reduce using rule 26 (Factor -> ID .)
    UNTIL           reduce using rule 26 (Factor -> ID .)
    }               reduce using rule 26 (Factor -> ID .)
    [               shift and go to state 77


state 53

    (53) Condicao -> IF ExprCond . Do { ListInstrucao } ;
    (54) Condicao -> IF ExprCond . Do { ListInstrucao } Else { ListInstrucao } ;
    (57) ExprCond -> ExprCond . & Cond
    (58) ExprCond -> ExprCond . | Cond
    (55) Do -> . DO

    &               shift and go to state 79
    |               shift and go to state 80
    DO              shift and go to state 81

    Do                             shift and go to state 78

state 54

    (59) ExprCond -> Cond .

    &               reduce using rule 59 (ExprCond -> Cond .)
    |               reduce using rule 59 (ExprCond -> Cond .)
    DO              reduce using rule 59 (ExprCond -> Cond .)
    FUNC            reduce using rule 59 (ExprCond -> Cond .)
    READ            reduce using rule 59 (ExprCond -> Cond .)
    WRITE           reduce using rule 59 (ExprCond -> Cond .)
    IF              reduce using rule 59 (ExprCond -> Cond .)
    RET             reduce using rule 59 (ExprCond -> Cond .)
    ID              reduce using rule 59 (ExprCond -> Cond .)
    FOR             reduce using rule 59 (ExprCond -> Cond .)
    WHILE           reduce using rule 59 (ExprCond -> Cond .)
    REPEAT          reduce using rule 59 (ExprCond -> Cond .)
    $end            reduce using rule 59 (ExprCond -> Cond .)
    UNTIL           reduce using rule 59 (ExprCond -> Cond .)
    }               reduce using rule 59 (ExprCond -> Cond .)
    ;               reduce using rule 59 (ExprCond -> Cond .)


state 55

    (60) Cond -> Expr . EQUAL Expr
    (61) Cond -> Expr . NOTEQUAL Expr
    (62) Cond -> Expr . BIGGER Expr
    (63) Cond -> Expr . SMALLER Expr
    (64) Cond -> Expr . BIGGEREQUAL Expr
    (65) Cond -> Expr . SMALLEREQUAL Expr
    (13) Expr -> Expr . + Term
    (14) Expr -> Expr . - Term

    EQUAL           shift and go to state 82
    NOTEQUAL        shift and go to state 83
    BIGGER          shift and go to state 84
    SMALLER         shift and go to state 85
    BIGGEREQUAL     shift and go to state 86
    SMALLEREQUAL    shift and go to state 87
    +               shift and go to state 69
    -               shift and go to state 70


state 56

    (36) Ret -> RET Expr . ;
    (13) Expr -> Expr . + Term
    (14) Expr -> Expr . - Term

    ;               shift and go to state 88
    +               shift and go to state 69
    -               shift and go to state 70


state 57

    (69) CicloWhile -> While ExprCond . Do { ListInstrucao }
    (57) ExprCond -> ExprCond . & Cond
    (58) ExprCond -> ExprCond . | Cond
    (55) Do -> . DO

    &               shift and go to state 79
    |               shift and go to state 80
    DO              shift and go to state 81

    Do                             shift and go to state 89

state 58

    (71) CicloRepeat -> Repeat ListInstrucao . Until ExprCond
    (37) ListInstrucao -> ListInstrucao . Instrucao
    (73) Until -> . UNTIL
    (39) Instrucao -> . Atribuicao
    (40) Instrucao -> . Leitura
    (41) Instrucao -> . Escrita
    (42) Instrucao -> . Condicao
    (43) Instrucao -> . Ciclo
    (44) Instrucao -> . Ret
    (45) Atribuicao -> . Var = Expr ;
    (51) Leitura -> . READ Var ;
    (52) Escrita -> . WRITE Expr ;
    (53) Condicao -> . IF ExprCond Do { ListInstrucao } ;
    (54) Condicao -> . IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ;
    (66) Ciclo -> . CicloWhile
    (67) Ciclo -> . CicloRepeat
    (68) Ciclo -> . CicloFor
    (36) Ret -> . RET Expr ;
    (46) Var -> . ID ContinuacaoVar
    (69) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (71) CicloRepeat -> . Repeat ListInstrucao Until ExprCond
    (74) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (70) While -> . WHILE
    (72) Repeat -> . REPEAT

    UNTIL           shift and go to state 92
    READ            shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    RET             shift and go to state 29
    ID              shift and go to state 21
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    REPEAT          shift and go to state 34

    Repeat                         shift and go to state 31
    Until                          shift and go to state 90
    Instrucao                      shift and go to state 91
    Atribuicao                     shift and go to state 14
    Leitura                        shift and go to state 15
    Escrita                        shift and go to state 16
    Condicao                       shift and go to state 17
    Ciclo                          shift and go to state 18
    Ret                            shift and go to state 19
    Var                            shift and go to state 22
    CicloWhile                     shift and go to state 26
    CicloRepeat                    shift and go to state 27
    CicloFor                       shift and go to state 28
    While                          shift and go to state 30

state 59

    (74) CicloFor -> FOR ( . AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (75) AtribuicaoInicial -> . Atribuicao
    (45) Atribuicao -> . Var = Expr ;
    (46) Var -> . ID ContinuacaoVar

    ID              shift and go to state 21

    AtribuicaoInicial              shift and go to state 93
    Atribuicao                     shift and go to state 94
    Var                            shift and go to state 22

state 60

    (6) Declaracao -> Type ID ; .

    }               reduce using rule 6 (Declaracao -> Type ID ; .)
    ID              reduce using rule 6 (Declaracao -> Type ID ; .)


state 61

    (7) Declaracao -> Type ID = . Expr ;
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Expr                           shift and go to state 95
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 62

    (8) Declaracao -> Type Array ID . ;

    ;               shift and go to state 96


state 63

    (10) Array -> [ INT . ] ContArray

    ]               shift and go to state 97


state 64

    (33) Funcao -> DecFunc { Variaveis . ListInstrucao EndFunc
    (37) ListInstrucao -> . ListInstrucao Instrucao
    (38) ListInstrucao -> .

    }               reduce using rule 38 (ListInstrucao -> .)
    READ            reduce using rule 38 (ListInstrucao -> .)
    WRITE           reduce using rule 38 (ListInstrucao -> .)
    IF              reduce using rule 38 (ListInstrucao -> .)
    RET             reduce using rule 38 (ListInstrucao -> .)
    ID              reduce using rule 38 (ListInstrucao -> .)
    FOR             reduce using rule 38 (ListInstrucao -> .)
    WHILE           reduce using rule 38 (ListInstrucao -> .)
    REPEAT          reduce using rule 38 (ListInstrucao -> .)

    ListInstrucao                  shift and go to state 98

state 65

    (47) ContinuacaoVar -> [ INT . ] ContContinuacaoVar

    ]               shift and go to state 99


state 66

    (45) Atribuicao -> Var = Expr . ;
    (13) Expr -> Expr . + Term
    (14) Expr -> Expr . - Term

    ;               shift and go to state 100
    +               shift and go to state 69
    -               shift and go to state 70


state 67

    (51) Leitura -> READ Var ; .

    FUNC            reduce using rule 51 (Leitura -> READ Var ; .)
    READ            reduce using rule 51 (Leitura -> READ Var ; .)
    WRITE           reduce using rule 51 (Leitura -> READ Var ; .)
    IF              reduce using rule 51 (Leitura -> READ Var ; .)
    RET             reduce using rule 51 (Leitura -> READ Var ; .)
    ID              reduce using rule 51 (Leitura -> READ Var ; .)
    FOR             reduce using rule 51 (Leitura -> READ Var ; .)
    WHILE           reduce using rule 51 (Leitura -> READ Var ; .)
    REPEAT          reduce using rule 51 (Leitura -> READ Var ; .)
    $end            reduce using rule 51 (Leitura -> READ Var ; .)
    UNTIL           reduce using rule 51 (Leitura -> READ Var ; .)
    }               reduce using rule 51 (Leitura -> READ Var ; .)


state 68

    (52) Escrita -> WRITE Expr ; .

    FUNC            reduce using rule 52 (Escrita -> WRITE Expr ; .)
    READ            reduce using rule 52 (Escrita -> WRITE Expr ; .)
    WRITE           reduce using rule 52 (Escrita -> WRITE Expr ; .)
    IF              reduce using rule 52 (Escrita -> WRITE Expr ; .)
    RET             reduce using rule 52 (Escrita -> WRITE Expr ; .)
    ID              reduce using rule 52 (Escrita -> WRITE Expr ; .)
    FOR             reduce using rule 52 (Escrita -> WRITE Expr ; .)
    WHILE           reduce using rule 52 (Escrita -> WRITE Expr ; .)
    REPEAT          reduce using rule 52 (Escrita -> WRITE Expr ; .)
    $end            reduce using rule 52 (Escrita -> WRITE Expr ; .)
    UNTIL           reduce using rule 52 (Escrita -> WRITE Expr ; .)
    }               reduce using rule 52 (Escrita -> WRITE Expr ; .)


state 69

    (13) Expr -> Expr + . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Term                           shift and go to state 101
    Factor                         shift and go to state 47

state 70

    (14) Expr -> Expr - . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Term                           shift and go to state 102
    Factor                         shift and go to state 47

state 71

    (16) Term -> Term * . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Factor                         shift and go to state 103

state 72

    (17) Term -> Term / . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Factor                         shift and go to state 104

state 73

    (18) Term -> Term % . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Factor                         shift and go to state 105

state 74

    (21) Factor -> - INT .

    *               reduce using rule 21 (Factor -> - INT .)
    /               reduce using rule 21 (Factor -> - INT .)
    %               reduce using rule 21 (Factor -> - INT .)
    ;               reduce using rule 21 (Factor -> - INT .)
    +               reduce using rule 21 (Factor -> - INT .)
    -               reduce using rule 21 (Factor -> - INT .)
    EQUAL           reduce using rule 21 (Factor -> - INT .)
    NOTEQUAL        reduce using rule 21 (Factor -> - INT .)
    BIGGER          reduce using rule 21 (Factor -> - INT .)
    SMALLER         reduce using rule 21 (Factor -> - INT .)
    BIGGEREQUAL     reduce using rule 21 (Factor -> - INT .)
    SMALLEREQUAL    reduce using rule 21 (Factor -> - INT .)
    &               reduce using rule 21 (Factor -> - INT .)
    |               reduce using rule 21 (Factor -> - INT .)
    DO              reduce using rule 21 (Factor -> - INT .)
    FUNC            reduce using rule 21 (Factor -> - INT .)
    READ            reduce using rule 21 (Factor -> - INT .)
    WRITE           reduce using rule 21 (Factor -> - INT .)
    IF              reduce using rule 21 (Factor -> - INT .)
    RET             reduce using rule 21 (Factor -> - INT .)
    ID              reduce using rule 21 (Factor -> - INT .)
    FOR             reduce using rule 21 (Factor -> - INT .)
    WHILE           reduce using rule 21 (Factor -> - INT .)
    REPEAT          reduce using rule 21 (Factor -> - INT .)
    $end            reduce using rule 21 (Factor -> - INT .)
    UNTIL           reduce using rule 21 (Factor -> - INT .)
    }               reduce using rule 21 (Factor -> - INT .)


state 75

    (23) Factor -> - FLOAT .

    *               reduce using rule 23 (Factor -> - FLOAT .)
    /               reduce using rule 23 (Factor -> - FLOAT .)
    %               reduce using rule 23 (Factor -> - FLOAT .)
    ;               reduce using rule 23 (Factor -> - FLOAT .)
    +               reduce using rule 23 (Factor -> - FLOAT .)
    -               reduce using rule 23 (Factor -> - FLOAT .)
    EQUAL           reduce using rule 23 (Factor -> - FLOAT .)
    NOTEQUAL        reduce using rule 23 (Factor -> - FLOAT .)
    BIGGER          reduce using rule 23 (Factor -> - FLOAT .)
    SMALLER         reduce using rule 23 (Factor -> - FLOAT .)
    BIGGEREQUAL     reduce using rule 23 (Factor -> - FLOAT .)
    SMALLEREQUAL    reduce using rule 23 (Factor -> - FLOAT .)
    &               reduce using rule 23 (Factor -> - FLOAT .)
    |               reduce using rule 23 (Factor -> - FLOAT .)
    DO              reduce using rule 23 (Factor -> - FLOAT .)
    FUNC            reduce using rule 23 (Factor -> - FLOAT .)
    READ            reduce using rule 23 (Factor -> - FLOAT .)
    WRITE           reduce using rule 23 (Factor -> - FLOAT .)
    IF              reduce using rule 23 (Factor -> - FLOAT .)
    RET             reduce using rule 23 (Factor -> - FLOAT .)
    ID              reduce using rule 23 (Factor -> - FLOAT .)
    FOR             reduce using rule 23 (Factor -> - FLOAT .)
    WHILE           reduce using rule 23 (Factor -> - FLOAT .)
    REPEAT          reduce using rule 23 (Factor -> - FLOAT .)
    $end            reduce using rule 23 (Factor -> - FLOAT .)
    UNTIL           reduce using rule 23 (Factor -> - FLOAT .)
    }               reduce using rule 23 (Factor -> - FLOAT .)


state 76

    (25) Factor -> CALL ID .

    *               reduce using rule 25 (Factor -> CALL ID .)
    /               reduce using rule 25 (Factor -> CALL ID .)
    %               reduce using rule 25 (Factor -> CALL ID .)
    ;               reduce using rule 25 (Factor -> CALL ID .)
    +               reduce using rule 25 (Factor -> CALL ID .)
    -               reduce using rule 25 (Factor -> CALL ID .)
    EQUAL           reduce using rule 25 (Factor -> CALL ID .)
    NOTEQUAL        reduce using rule 25 (Factor -> CALL ID .)
    BIGGER          reduce using rule 25 (Factor -> CALL ID .)
    SMALLER         reduce using rule 25 (Factor -> CALL ID .)
    BIGGEREQUAL     reduce using rule 25 (Factor -> CALL ID .)
    SMALLEREQUAL    reduce using rule 25 (Factor -> CALL ID .)
    &               reduce using rule 25 (Factor -> CALL ID .)
    |               reduce using rule 25 (Factor -> CALL ID .)
    DO              reduce using rule 25 (Factor -> CALL ID .)
    FUNC            reduce using rule 25 (Factor -> CALL ID .)
    READ            reduce using rule 25 (Factor -> CALL ID .)
    WRITE           reduce using rule 25 (Factor -> CALL ID .)
    IF              reduce using rule 25 (Factor -> CALL ID .)
    RET             reduce using rule 25 (Factor -> CALL ID .)
    ID              reduce using rule 25 (Factor -> CALL ID .)
    FOR             reduce using rule 25 (Factor -> CALL ID .)
    WHILE           reduce using rule 25 (Factor -> CALL ID .)
    REPEAT          reduce using rule 25 (Factor -> CALL ID .)
    $end            reduce using rule 25 (Factor -> CALL ID .)
    UNTIL           reduce using rule 25 (Factor -> CALL ID .)
    }               reduce using rule 25 (Factor -> CALL ID .)


state 77

    (27) Factor -> ID [ . INT ] ArrayCol

    INT             shift and go to state 106


state 78

    (53) Condicao -> IF ExprCond Do . { ListInstrucao } ;
    (54) Condicao -> IF ExprCond Do . { ListInstrucao } Else { ListInstrucao } ;

    {               shift and go to state 107


state 79

    (57) ExprCond -> ExprCond & . Cond
    (60) Cond -> . Expr EQUAL Expr
    (61) Cond -> . Expr NOTEQUAL Expr
    (62) Cond -> . Expr BIGGER Expr
    (63) Cond -> . Expr SMALLER Expr
    (64) Cond -> . Expr BIGGEREQUAL Expr
    (65) Cond -> . Expr SMALLEREQUAL Expr
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Cond                           shift and go to state 108
    Expr                           shift and go to state 55
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 80

    (58) ExprCond -> ExprCond | . Cond
    (60) Cond -> . Expr EQUAL Expr
    (61) Cond -> . Expr NOTEQUAL Expr
    (62) Cond -> . Expr BIGGER Expr
    (63) Cond -> . Expr SMALLER Expr
    (64) Cond -> . Expr BIGGEREQUAL Expr
    (65) Cond -> . Expr SMALLEREQUAL Expr
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Cond                           shift and go to state 109
    Expr                           shift and go to state 55
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 81

    (55) Do -> DO .

    {               reduce using rule 55 (Do -> DO .)


state 82

    (60) Cond -> Expr EQUAL . Expr
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Expr                           shift and go to state 110
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 83

    (61) Cond -> Expr NOTEQUAL . Expr
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Expr                           shift and go to state 111
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 84

    (62) Cond -> Expr BIGGER . Expr
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Expr                           shift and go to state 112
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 85

    (63) Cond -> Expr SMALLER . Expr
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Expr                           shift and go to state 113
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 86

    (64) Cond -> Expr BIGGEREQUAL . Expr
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Expr                           shift and go to state 114
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 87

    (65) Cond -> Expr SMALLEREQUAL . Expr
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    Expr                           shift and go to state 115
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 88

    (36) Ret -> RET Expr ; .

    FUNC            reduce using rule 36 (Ret -> RET Expr ; .)
    READ            reduce using rule 36 (Ret -> RET Expr ; .)
    WRITE           reduce using rule 36 (Ret -> RET Expr ; .)
    IF              reduce using rule 36 (Ret -> RET Expr ; .)
    RET             reduce using rule 36 (Ret -> RET Expr ; .)
    ID              reduce using rule 36 (Ret -> RET Expr ; .)
    FOR             reduce using rule 36 (Ret -> RET Expr ; .)
    WHILE           reduce using rule 36 (Ret -> RET Expr ; .)
    REPEAT          reduce using rule 36 (Ret -> RET Expr ; .)
    $end            reduce using rule 36 (Ret -> RET Expr ; .)
    UNTIL           reduce using rule 36 (Ret -> RET Expr ; .)
    }               reduce using rule 36 (Ret -> RET Expr ; .)


state 89

    (69) CicloWhile -> While ExprCond Do . { ListInstrucao }

    {               shift and go to state 116


state 90

    (71) CicloRepeat -> Repeat ListInstrucao Until . ExprCond
    (57) ExprCond -> . ExprCond & Cond
    (58) ExprCond -> . ExprCond | Cond
    (59) ExprCond -> . Cond
    (60) Cond -> . Expr EQUAL Expr
    (61) Cond -> . Expr NOTEQUAL Expr
    (62) Cond -> . Expr BIGGER Expr
    (63) Cond -> . Expr SMALLER Expr
    (64) Cond -> . Expr BIGGEREQUAL Expr
    (65) Cond -> . Expr SMALLEREQUAL Expr
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    ExprCond                       shift and go to state 117
    Cond                           shift and go to state 54
    Expr                           shift and go to state 55
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 91

    (37) ListInstrucao -> ListInstrucao Instrucao .

    UNTIL           reduce using rule 37 (ListInstrucao -> ListInstrucao Instrucao .)
    READ            reduce using rule 37 (ListInstrucao -> ListInstrucao Instrucao .)
    WRITE           reduce using rule 37 (ListInstrucao -> ListInstrucao Instrucao .)
    IF              reduce using rule 37 (ListInstrucao -> ListInstrucao Instrucao .)
    RET             reduce using rule 37 (ListInstrucao -> ListInstrucao Instrucao .)
    ID              reduce using rule 37 (ListInstrucao -> ListInstrucao Instrucao .)
    FOR             reduce using rule 37 (ListInstrucao -> ListInstrucao Instrucao .)
    WHILE           reduce using rule 37 (ListInstrucao -> ListInstrucao Instrucao .)
    REPEAT          reduce using rule 37 (ListInstrucao -> ListInstrucao Instrucao .)
    }               reduce using rule 37 (ListInstrucao -> ListInstrucao Instrucao .)


state 92

    (73) Until -> UNTIL .

    INT             reduce using rule 73 (Until -> UNTIL .)
    -               reduce using rule 73 (Until -> UNTIL .)
    FLOAT           reduce using rule 73 (Until -> UNTIL .)
    STRING          reduce using rule 73 (Until -> UNTIL .)
    CALL            reduce using rule 73 (Until -> UNTIL .)
    ID              reduce using rule 73 (Until -> UNTIL .)


state 93

    (74) CicloFor -> FOR ( AtribuicaoInicial . ExprCond EndCond Atribuicao ) { ListInstrucao }
    (57) ExprCond -> . ExprCond & Cond
    (58) ExprCond -> . ExprCond | Cond
    (59) ExprCond -> . Cond
    (60) Cond -> . Expr EQUAL Expr
    (61) Cond -> . Expr NOTEQUAL Expr
    (62) Cond -> . Expr BIGGER Expr
    (63) Cond -> . Expr SMALLER Expr
    (64) Cond -> . Expr BIGGEREQUAL Expr
    (65) Cond -> . Expr SMALLEREQUAL Expr
    (13) Expr -> . Expr + Term
    (14) Expr -> . Expr - Term
    (15) Expr -> . Term
    (16) Term -> . Term * Factor
    (17) Term -> . Term / Factor
    (18) Term -> . Term % Factor
    (19) Term -> . Factor
    (20) Factor -> . INT
    (21) Factor -> . - INT
    (22) Factor -> . FLOAT
    (23) Factor -> . - FLOAT
    (24) Factor -> . STRING
    (25) Factor -> . CALL ID
    (26) Factor -> . ID
    (27) Factor -> . ID [ INT ] ArrayCol

    INT             shift and go to state 48
    -               shift and go to state 46
    FLOAT           shift and go to state 49
    STRING          shift and go to state 50
    CALL            shift and go to state 51
    ID              shift and go to state 52

    ExprCond                       shift and go to state 118
    Cond                           shift and go to state 54
    Expr                           shift and go to state 55
    Term                           shift and go to state 45
    Factor                         shift and go to state 47

state 94

    (75) AtribuicaoInicial -> Atribuicao .

    INT             reduce using rule 75 (AtribuicaoInicial -> Atribuicao .)
    -               reduce using rule 75 (AtribuicaoInicial -> Atribuicao .)
    FLOAT           reduce using rule 75 (AtribuicaoInicial -> Atribuicao .)
    STRING          reduce using rule 75 (AtribuicaoInicial -> Atribuicao .)
    CALL            reduce using rule 75 (AtribuicaoInicial -> Atribuicao .)
    ID              reduce using rule 75 (AtribuicaoInicial -> Atribuicao .)


state 95

    (7) Declaracao -> Type ID = Expr . ;
    (13) Expr -> Expr . + Term
    (14) Expr -> Expr . - Term

    ;               shift and go to state 119
    +               shift and go to state 69
    -               shift and go to state 70


state 96

    (8) Declaracao -> Type Array ID ; .

    }               reduce using rule 8 (Declaracao -> Type Array ID ; .)
    ID              reduce using rule 8 (Declaracao -> Type Array ID ; .)


state 97

    (10) Array -> [ INT ] . ContArray
    (11) ContArray -> . [ INT ]
    (12) ContArray -> .

    [               shift and go to state 120
    ID              reduce using rule 12 (ContArray -> .)

    ContArray                      shift and go to state 121

state 98

    (33) Funcao -> DecFunc { Variaveis ListInstrucao . EndFunc
    (37) ListInstrucao -> ListInstrucao . Instrucao
    (35) EndFunc -> . }
    (39) Instrucao -> . Atribuicao
    (40) Instrucao -> . Leitura
    (41) Instrucao -> . Escrita
    (42) Instrucao -> . Condicao
    (43) Instrucao -> . Ciclo
    (44) Instrucao -> . Ret
    (45) Atribuicao -> . Var = Expr ;
    (51) Leitura -> . READ Var ;
    (52) Escrita -> . WRITE Expr ;
    (53) Condicao -> . IF ExprCond Do { ListInstrucao } ;
    (54) Condicao -> . IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ;
    (66) Ciclo -> . CicloWhile
    (67) Ciclo -> . CicloRepeat
    (68) Ciclo -> . CicloFor
    (36) Ret -> . RET Expr ;
    (46) Var -> . ID ContinuacaoVar
    (69) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (71) CicloRepeat -> . Repeat ListInstrucao Until ExprCond
    (74) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (70) While -> . WHILE
    (72) Repeat -> . REPEAT

    }               shift and go to state 123
    READ            shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    RET             shift and go to state 29
    ID              shift and go to state 21
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    REPEAT          shift and go to state 34

    EndFunc                        shift and go to state 122
    Instrucao                      shift and go to state 91
    Atribuicao                     shift and go to state 14
    Leitura                        shift and go to state 15
    Escrita                        shift and go to state 16
    Condicao                       shift and go to state 17
    Ciclo                          shift and go to state 18
    Ret                            shift and go to state 19
    Var                            shift and go to state 22
    CicloWhile                     shift and go to state 26
    CicloRepeat                    shift and go to state 27
    CicloFor                       shift and go to state 28
    While                          shift and go to state 30
    Repeat                         shift and go to state 31

state 99

    (47) ContinuacaoVar -> [ INT ] . ContContinuacaoVar
    (49) ContContinuacaoVar -> . [ INT ]
    (50) ContContinuacaoVar -> .

    [               shift and go to state 124
    =               reduce using rule 50 (ContContinuacaoVar -> .)
    ;               reduce using rule 50 (ContContinuacaoVar -> .)

    ContContinuacaoVar             shift and go to state 125

state 100

    (45) Atribuicao -> Var = Expr ; .

    FUNC            reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    READ            reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    WRITE           reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    IF              reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    RET             reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    ID              reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    FOR             reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    WHILE           reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    REPEAT          reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    $end            reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    UNTIL           reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    INT             reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    -               reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    FLOAT           reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    STRING          reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    CALL            reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    }               reduce using rule 45 (Atribuicao -> Var = Expr ; .)
    )               reduce using rule 45 (Atribuicao -> Var = Expr ; .)


state 101

    (13) Expr -> Expr + Term .
    (16) Term -> Term . * Factor
    (17) Term -> Term . / Factor
    (18) Term -> Term . % Factor

    ;               reduce using rule 13 (Expr -> Expr + Term .)
    +               reduce using rule 13 (Expr -> Expr + Term .)
    -               reduce using rule 13 (Expr -> Expr + Term .)
    EQUAL           reduce using rule 13 (Expr -> Expr + Term .)
    NOTEQUAL        reduce using rule 13 (Expr -> Expr + Term .)
    BIGGER          reduce using rule 13 (Expr -> Expr + Term .)
    SMALLER         reduce using rule 13 (Expr -> Expr + Term .)
    BIGGEREQUAL     reduce using rule 13 (Expr -> Expr + Term .)
    SMALLEREQUAL    reduce using rule 13 (Expr -> Expr + Term .)
    &               reduce using rule 13 (Expr -> Expr + Term .)
    |               reduce using rule 13 (Expr -> Expr + Term .)
    DO              reduce using rule 13 (Expr -> Expr + Term .)
    FUNC            reduce using rule 13 (Expr -> Expr + Term .)
    READ            reduce using rule 13 (Expr -> Expr + Term .)
    WRITE           reduce using rule 13 (Expr -> Expr + Term .)
    IF              reduce using rule 13 (Expr -> Expr + Term .)
    RET             reduce using rule 13 (Expr -> Expr + Term .)
    ID              reduce using rule 13 (Expr -> Expr + Term .)
    FOR             reduce using rule 13 (Expr -> Expr + Term .)
    WHILE           reduce using rule 13 (Expr -> Expr + Term .)
    REPEAT          reduce using rule 13 (Expr -> Expr + Term .)
    $end            reduce using rule 13 (Expr -> Expr + Term .)
    UNTIL           reduce using rule 13 (Expr -> Expr + Term .)
    }               reduce using rule 13 (Expr -> Expr + Term .)
    *               shift and go to state 71
    /               shift and go to state 72
    %               shift and go to state 73


state 102

    (14) Expr -> Expr - Term .
    (16) Term -> Term . * Factor
    (17) Term -> Term . / Factor
    (18) Term -> Term . % Factor

    ;               reduce using rule 14 (Expr -> Expr - Term .)
    +               reduce using rule 14 (Expr -> Expr - Term .)
    -               reduce using rule 14 (Expr -> Expr - Term .)
    EQUAL           reduce using rule 14 (Expr -> Expr - Term .)
    NOTEQUAL        reduce using rule 14 (Expr -> Expr - Term .)
    BIGGER          reduce using rule 14 (Expr -> Expr - Term .)
    SMALLER         reduce using rule 14 (Expr -> Expr - Term .)
    BIGGEREQUAL     reduce using rule 14 (Expr -> Expr - Term .)
    SMALLEREQUAL    reduce using rule 14 (Expr -> Expr - Term .)
    &               reduce using rule 14 (Expr -> Expr - Term .)
    |               reduce using rule 14 (Expr -> Expr - Term .)
    DO              reduce using rule 14 (Expr -> Expr - Term .)
    FUNC            reduce using rule 14 (Expr -> Expr - Term .)
    READ            reduce using rule 14 (Expr -> Expr - Term .)
    WRITE           reduce using rule 14 (Expr -> Expr - Term .)
    IF              reduce using rule 14 (Expr -> Expr - Term .)
    RET             reduce using rule 14 (Expr -> Expr - Term .)
    ID              reduce using rule 14 (Expr -> Expr - Term .)
    FOR             reduce using rule 14 (Expr -> Expr - Term .)
    WHILE           reduce using rule 14 (Expr -> Expr - Term .)
    REPEAT          reduce using rule 14 (Expr -> Expr - Term .)
    $end            reduce using rule 14 (Expr -> Expr - Term .)
    UNTIL           reduce using rule 14 (Expr -> Expr - Term .)
    }               reduce using rule 14 (Expr -> Expr - Term .)
    *               shift and go to state 71
    /               shift and go to state 72
    %               shift and go to state 73


state 103

    (16) Term -> Term * Factor .

    *               reduce using rule 16 (Term -> Term * Factor .)
    /               reduce using rule 16 (Term -> Term * Factor .)
    %               reduce using rule 16 (Term -> Term * Factor .)
    ;               reduce using rule 16 (Term -> Term * Factor .)
    +               reduce using rule 16 (Term -> Term * Factor .)
    -               reduce using rule 16 (Term -> Term * Factor .)
    EQUAL           reduce using rule 16 (Term -> Term * Factor .)
    NOTEQUAL        reduce using rule 16 (Term -> Term * Factor .)
    BIGGER          reduce using rule 16 (Term -> Term * Factor .)
    SMALLER         reduce using rule 16 (Term -> Term * Factor .)
    BIGGEREQUAL     reduce using rule 16 (Term -> Term * Factor .)
    SMALLEREQUAL    reduce using rule 16 (Term -> Term * Factor .)
    &               reduce using rule 16 (Term -> Term * Factor .)
    |               reduce using rule 16 (Term -> Term * Factor .)
    DO              reduce using rule 16 (Term -> Term * Factor .)
    FUNC            reduce using rule 16 (Term -> Term * Factor .)
    READ            reduce using rule 16 (Term -> Term * Factor .)
    WRITE           reduce using rule 16 (Term -> Term * Factor .)
    IF              reduce using rule 16 (Term -> Term * Factor .)
    RET             reduce using rule 16 (Term -> Term * Factor .)
    ID              reduce using rule 16 (Term -> Term * Factor .)
    FOR             reduce using rule 16 (Term -> Term * Factor .)
    WHILE           reduce using rule 16 (Term -> Term * Factor .)
    REPEAT          reduce using rule 16 (Term -> Term * Factor .)
    $end            reduce using rule 16 (Term -> Term * Factor .)
    UNTIL           reduce using rule 16 (Term -> Term * Factor .)
    }               reduce using rule 16 (Term -> Term * Factor .)


state 104

    (17) Term -> Term / Factor .

    *               reduce using rule 17 (Term -> Term / Factor .)
    /               reduce using rule 17 (Term -> Term / Factor .)
    %               reduce using rule 17 (Term -> Term / Factor .)
    ;               reduce using rule 17 (Term -> Term / Factor .)
    +               reduce using rule 17 (Term -> Term / Factor .)
    -               reduce using rule 17 (Term -> Term / Factor .)
    EQUAL           reduce using rule 17 (Term -> Term / Factor .)
    NOTEQUAL        reduce using rule 17 (Term -> Term / Factor .)
    BIGGER          reduce using rule 17 (Term -> Term / Factor .)
    SMALLER         reduce using rule 17 (Term -> Term / Factor .)
    BIGGEREQUAL     reduce using rule 17 (Term -> Term / Factor .)
    SMALLEREQUAL    reduce using rule 17 (Term -> Term / Factor .)
    &               reduce using rule 17 (Term -> Term / Factor .)
    |               reduce using rule 17 (Term -> Term / Factor .)
    DO              reduce using rule 17 (Term -> Term / Factor .)
    FUNC            reduce using rule 17 (Term -> Term / Factor .)
    READ            reduce using rule 17 (Term -> Term / Factor .)
    WRITE           reduce using rule 17 (Term -> Term / Factor .)
    IF              reduce using rule 17 (Term -> Term / Factor .)
    RET             reduce using rule 17 (Term -> Term / Factor .)
    ID              reduce using rule 17 (Term -> Term / Factor .)
    FOR             reduce using rule 17 (Term -> Term / Factor .)
    WHILE           reduce using rule 17 (Term -> Term / Factor .)
    REPEAT          reduce using rule 17 (Term -> Term / Factor .)
    $end            reduce using rule 17 (Term -> Term / Factor .)
    UNTIL           reduce using rule 17 (Term -> Term / Factor .)
    }               reduce using rule 17 (Term -> Term / Factor .)


state 105

    (18) Term -> Term % Factor .

    *               reduce using rule 18 (Term -> Term % Factor .)
    /               reduce using rule 18 (Term -> Term % Factor .)
    %               reduce using rule 18 (Term -> Term % Factor .)
    ;               reduce using rule 18 (Term -> Term % Factor .)
    +               reduce using rule 18 (Term -> Term % Factor .)
    -               reduce using rule 18 (Term -> Term % Factor .)
    EQUAL           reduce using rule 18 (Term -> Term % Factor .)
    NOTEQUAL        reduce using rule 18 (Term -> Term % Factor .)
    BIGGER          reduce using rule 18 (Term -> Term % Factor .)
    SMALLER         reduce using rule 18 (Term -> Term % Factor .)
    BIGGEREQUAL     reduce using rule 18 (Term -> Term % Factor .)
    SMALLEREQUAL    reduce using rule 18 (Term -> Term % Factor .)
    &               reduce using rule 18 (Term -> Term % Factor .)
    |               reduce using rule 18 (Term -> Term % Factor .)
    DO              reduce using rule 18 (Term -> Term % Factor .)
    FUNC            reduce using rule 18 (Term -> Term % Factor .)
    READ            reduce using rule 18 (Term -> Term % Factor .)
    WRITE           reduce using rule 18 (Term -> Term % Factor .)
    IF              reduce using rule 18 (Term -> Term % Factor .)
    RET             reduce using rule 18 (Term -> Term % Factor .)
    ID              reduce using rule 18 (Term -> Term % Factor .)
    FOR             reduce using rule 18 (Term -> Term % Factor .)
    WHILE           reduce using rule 18 (Term -> Term % Factor .)
    REPEAT          reduce using rule 18 (Term -> Term % Factor .)
    $end            reduce using rule 18 (Term -> Term % Factor .)
    UNTIL           reduce using rule 18 (Term -> Term % Factor .)
    }               reduce using rule 18 (Term -> Term % Factor .)


state 106

    (27) Factor -> ID [ INT . ] ArrayCol

    ]               shift and go to state 126


state 107

    (53) Condicao -> IF ExprCond Do { . ListInstrucao } ;
    (54) Condicao -> IF ExprCond Do { . ListInstrucao } Else { ListInstrucao } ;
    (37) ListInstrucao -> . ListInstrucao Instrucao
    (38) ListInstrucao -> .

    }               reduce using rule 38 (ListInstrucao -> .)
    READ            reduce using rule 38 (ListInstrucao -> .)
    WRITE           reduce using rule 38 (ListInstrucao -> .)
    IF              reduce using rule 38 (ListInstrucao -> .)
    RET             reduce using rule 38 (ListInstrucao -> .)
    ID              reduce using rule 38 (ListInstrucao -> .)
    FOR             reduce using rule 38 (ListInstrucao -> .)
    WHILE           reduce using rule 38 (ListInstrucao -> .)
    REPEAT          reduce using rule 38 (ListInstrucao -> .)

    ListInstrucao                  shift and go to state 127

state 108

    (57) ExprCond -> ExprCond & Cond .

    &               reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    |               reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    DO              reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    FUNC            reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    READ            reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    WRITE           reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    IF              reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    RET             reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    ID              reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    FOR             reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    WHILE           reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    REPEAT          reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    $end            reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    UNTIL           reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    }               reduce using rule 57 (ExprCond -> ExprCond & Cond .)
    ;               reduce using rule 57 (ExprCond -> ExprCond & Cond .)


state 109

    (58) ExprCond -> ExprCond | Cond .

    &               reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    |               reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    DO              reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    FUNC            reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    READ            reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    WRITE           reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    IF              reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    RET             reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    ID              reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    FOR             reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    WHILE           reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    REPEAT          reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    $end            reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    UNTIL           reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    }               reduce using rule 58 (ExprCond -> ExprCond | Cond .)
    ;               reduce using rule 58 (ExprCond -> ExprCond | Cond .)


state 110

    (60) Cond -> Expr EQUAL Expr .
    (13) Expr -> Expr . + Term
    (14) Expr -> Expr . - Term

    &               reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    |               reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    DO              reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    FUNC            reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    READ            reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    WRITE           reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    IF              reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    RET             reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    ID              reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    FOR             reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    WHILE           reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    REPEAT          reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    $end            reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    UNTIL           reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    }               reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    ;               reduce using rule 60 (Cond -> Expr EQUAL Expr .)
    +               shift and go to state 69
    -               shift and go to state 70


state 111

    (61) Cond -> Expr NOTEQUAL Expr .
    (13) Expr -> Expr . + Term
    (14) Expr -> Expr . - Term

    &               reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    |               reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    DO              reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    FUNC            reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    READ            reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    WRITE           reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    IF              reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    RET             reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    ID              reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    FOR             reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    WHILE           reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    REPEAT          reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    $end            reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    UNTIL           reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    }               reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    ;               reduce using rule 61 (Cond -> Expr NOTEQUAL Expr .)
    +               shift and go to state 69
    -               shift and go to state 70


state 112

    (62) Cond -> Expr BIGGER Expr .
    (13) Expr -> Expr . + Term
    (14) Expr -> Expr . - Term

    &               reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    |               reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    DO              reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    FUNC            reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    READ            reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    WRITE           reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    IF              reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    RET             reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    ID              reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    FOR             reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    WHILE           reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    REPEAT          reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    $end            reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    UNTIL           reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    }               reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    ;               reduce using rule 62 (Cond -> Expr BIGGER Expr .)
    +               shift and go to state 69
    -               shift and go to state 70


state 113

    (63) Cond -> Expr SMALLER Expr .
    (13) Expr -> Expr . + Term
    (14) Expr -> Expr . - Term

    &               reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    |               reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    DO              reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    FUNC            reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    READ            reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    WRITE           reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    IF              reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    RET             reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    ID              reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    FOR             reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    WHILE           reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    REPEAT          reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    $end            reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    UNTIL           reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    }               reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    ;               reduce using rule 63 (Cond -> Expr SMALLER Expr .)
    +               shift and go to state 69
    -               shift and go to state 70


state 114

    (64) Cond -> Expr BIGGEREQUAL Expr .
    (13) Expr -> Expr . + Term
    (14) Expr -> Expr . - Term

    &               reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    |               reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    DO              reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    FUNC            reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    READ            reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    WRITE           reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    IF              reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    RET             reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    ID              reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    FOR             reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    WHILE           reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    REPEAT          reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    $end            reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    UNTIL           reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    }               reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    ;               reduce using rule 64 (Cond -> Expr BIGGEREQUAL Expr .)
    +               shift and go to state 69
    -               shift and go to state 70


state 115

    (65) Cond -> Expr SMALLEREQUAL Expr .
    (13) Expr -> Expr . + Term
    (14) Expr -> Expr . - Term

    &               reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    |               reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    DO              reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    FUNC            reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    READ            reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    WRITE           reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    IF              reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    RET             reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    ID              reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    FOR             reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    WHILE           reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    REPEAT          reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    $end            reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    UNTIL           reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    }               reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    ;               reduce using rule 65 (Cond -> Expr SMALLEREQUAL Expr .)
    +               shift and go to state 69
    -               shift and go to state 70


state 116

    (69) CicloWhile -> While ExprCond Do { . ListInstrucao }
    (37) ListInstrucao -> . ListInstrucao Instrucao
    (38) ListInstrucao -> .

    }               reduce using rule 38 (ListInstrucao -> .)
    READ            reduce using rule 38 (ListInstrucao -> .)
    WRITE           reduce using rule 38 (ListInstrucao -> .)
    IF              reduce using rule 38 (ListInstrucao -> .)
    RET             reduce using rule 38 (ListInstrucao -> .)
    ID              reduce using rule 38 (ListInstrucao -> .)
    FOR             reduce using rule 38 (ListInstrucao -> .)
    WHILE           reduce using rule 38 (ListInstrucao -> .)
    REPEAT          reduce using rule 38 (ListInstrucao -> .)

    ListInstrucao                  shift and go to state 128

state 117

    (71) CicloRepeat -> Repeat ListInstrucao Until ExprCond .
    (57) ExprCond -> ExprCond . & Cond
    (58) ExprCond -> ExprCond . | Cond

    FUNC            reduce using rule 71 (CicloRepeat -> Repeat ListInstrucao Until ExprCond .)
    READ            reduce using rule 71 (CicloRepeat -> Repeat ListInstrucao Until ExprCond .)
    WRITE           reduce using rule 71 (CicloRepeat -> Repeat ListInstrucao Until ExprCond .)
    IF              reduce using rule 71 (CicloRepeat -> Repeat ListInstrucao Until ExprCond .)
    RET             reduce using rule 71 (CicloRepeat -> Repeat ListInstrucao Until ExprCond .)
    ID              reduce using rule 71 (CicloRepeat -> Repeat ListInstrucao Until ExprCond .)
    FOR             reduce using rule 71 (CicloRepeat -> Repeat ListInstrucao Until ExprCond .)
    WHILE           reduce using rule 71 (CicloRepeat -> Repeat ListInstrucao Until ExprCond .)
    REPEAT          reduce using rule 71 (CicloRepeat -> Repeat ListInstrucao Until ExprCond .)
    $end            reduce using rule 71 (CicloRepeat -> Repeat ListInstrucao Until ExprCond .)
    UNTIL           reduce using rule 71 (CicloRepeat -> Repeat ListInstrucao Until ExprCond .)
    }               reduce using rule 71 (CicloRepeat -> Repeat ListInstrucao Until ExprCond .)
    &               shift and go to state 79
    |               shift and go to state 80


state 118

    (74) CicloFor -> FOR ( AtribuicaoInicial ExprCond . EndCond Atribuicao ) { ListInstrucao }
    (57) ExprCond -> ExprCond . & Cond
    (58) ExprCond -> ExprCond . | Cond
    (76) EndCond -> . ;

    &               shift and go to state 79
    |               shift and go to state 80
    ;               shift and go to state 130

    EndCond                        shift and go to state 129

state 119

    (7) Declaracao -> Type ID = Expr ; .

    }               reduce using rule 7 (Declaracao -> Type ID = Expr ; .)
    ID              reduce using rule 7 (Declaracao -> Type ID = Expr ; .)


state 120

    (11) ContArray -> [ . INT ]

    INT             shift and go to state 131


state 121

    (10) Array -> [ INT ] ContArray .

    ID              reduce using rule 10 (Array -> [ INT ] ContArray .)


state 122

    (33) Funcao -> DecFunc { Variaveis ListInstrucao EndFunc .

    FUNC            reduce using rule 33 (Funcao -> DecFunc { Variaveis ListInstrucao EndFunc .)
    READ            reduce using rule 33 (Funcao -> DecFunc { Variaveis ListInstrucao EndFunc .)
    WRITE           reduce using rule 33 (Funcao -> DecFunc { Variaveis ListInstrucao EndFunc .)
    IF              reduce using rule 33 (Funcao -> DecFunc { Variaveis ListInstrucao EndFunc .)
    RET             reduce using rule 33 (Funcao -> DecFunc { Variaveis ListInstrucao EndFunc .)
    ID              reduce using rule 33 (Funcao -> DecFunc { Variaveis ListInstrucao EndFunc .)
    FOR             reduce using rule 33 (Funcao -> DecFunc { Variaveis ListInstrucao EndFunc .)
    WHILE           reduce using rule 33 (Funcao -> DecFunc { Variaveis ListInstrucao EndFunc .)
    REPEAT          reduce using rule 33 (Funcao -> DecFunc { Variaveis ListInstrucao EndFunc .)
    $end            reduce using rule 33 (Funcao -> DecFunc { Variaveis ListInstrucao EndFunc .)


state 123

    (35) EndFunc -> } .

    FUNC            reduce using rule 35 (EndFunc -> } .)
    READ            reduce using rule 35 (EndFunc -> } .)
    WRITE           reduce using rule 35 (EndFunc -> } .)
    IF              reduce using rule 35 (EndFunc -> } .)
    RET             reduce using rule 35 (EndFunc -> } .)
    ID              reduce using rule 35 (EndFunc -> } .)
    FOR             reduce using rule 35 (EndFunc -> } .)
    WHILE           reduce using rule 35 (EndFunc -> } .)
    REPEAT          reduce using rule 35 (EndFunc -> } .)
    $end            reduce using rule 35 (EndFunc -> } .)


state 124

    (49) ContContinuacaoVar -> [ . INT ]

    INT             shift and go to state 132


state 125

    (47) ContinuacaoVar -> [ INT ] ContContinuacaoVar .

    =               reduce using rule 47 (ContinuacaoVar -> [ INT ] ContContinuacaoVar .)
    ;               reduce using rule 47 (ContinuacaoVar -> [ INT ] ContContinuacaoVar .)


state 126

    (27) Factor -> ID [ INT ] . ArrayCol
    (28) ArrayCol -> . [ INT ]
    (29) ArrayCol -> .

    [               shift and go to state 133
    *               reduce using rule 29 (ArrayCol -> .)
    /               reduce using rule 29 (ArrayCol -> .)
    %               reduce using rule 29 (ArrayCol -> .)
    ;               reduce using rule 29 (ArrayCol -> .)
    +               reduce using rule 29 (ArrayCol -> .)
    -               reduce using rule 29 (ArrayCol -> .)
    EQUAL           reduce using rule 29 (ArrayCol -> .)
    NOTEQUAL        reduce using rule 29 (ArrayCol -> .)
    BIGGER          reduce using rule 29 (ArrayCol -> .)
    SMALLER         reduce using rule 29 (ArrayCol -> .)
    BIGGEREQUAL     reduce using rule 29 (ArrayCol -> .)
    SMALLEREQUAL    reduce using rule 29 (ArrayCol -> .)
    &               reduce using rule 29 (ArrayCol -> .)
    |               reduce using rule 29 (ArrayCol -> .)
    DO              reduce using rule 29 (ArrayCol -> .)
    FUNC            reduce using rule 29 (ArrayCol -> .)
    READ            reduce using rule 29 (ArrayCol -> .)
    WRITE           reduce using rule 29 (ArrayCol -> .)
    IF              reduce using rule 29 (ArrayCol -> .)
    RET             reduce using rule 29 (ArrayCol -> .)
    ID              reduce using rule 29 (ArrayCol -> .)
    FOR             reduce using rule 29 (ArrayCol -> .)
    WHILE           reduce using rule 29 (ArrayCol -> .)
    REPEAT          reduce using rule 29 (ArrayCol -> .)
    $end            reduce using rule 29 (ArrayCol -> .)
    UNTIL           reduce using rule 29 (ArrayCol -> .)
    }               reduce using rule 29 (ArrayCol -> .)

    ArrayCol                       shift and go to state 134

state 127

    (53) Condicao -> IF ExprCond Do { ListInstrucao . } ;
    (54) Condicao -> IF ExprCond Do { ListInstrucao . } Else { ListInstrucao } ;
    (37) ListInstrucao -> ListInstrucao . Instrucao
    (39) Instrucao -> . Atribuicao
    (40) Instrucao -> . Leitura
    (41) Instrucao -> . Escrita
    (42) Instrucao -> . Condicao
    (43) Instrucao -> . Ciclo
    (44) Instrucao -> . Ret
    (45) Atribuicao -> . Var = Expr ;
    (51) Leitura -> . READ Var ;
    (52) Escrita -> . WRITE Expr ;
    (53) Condicao -> . IF ExprCond Do { ListInstrucao } ;
    (54) Condicao -> . IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ;
    (66) Ciclo -> . CicloWhile
    (67) Ciclo -> . CicloRepeat
    (68) Ciclo -> . CicloFor
    (36) Ret -> . RET Expr ;
    (46) Var -> . ID ContinuacaoVar
    (69) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (71) CicloRepeat -> . Repeat ListInstrucao Until ExprCond
    (74) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (70) While -> . WHILE
    (72) Repeat -> . REPEAT

    }               shift and go to state 135
    READ            shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    RET             shift and go to state 29
    ID              shift and go to state 21
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    REPEAT          shift and go to state 34

    Instrucao                      shift and go to state 91
    Atribuicao                     shift and go to state 14
    Leitura                        shift and go to state 15
    Escrita                        shift and go to state 16
    Condicao                       shift and go to state 17
    Ciclo                          shift and go to state 18
    Ret                            shift and go to state 19
    Var                            shift and go to state 22
    CicloWhile                     shift and go to state 26
    CicloRepeat                    shift and go to state 27
    CicloFor                       shift and go to state 28
    While                          shift and go to state 30
    Repeat                         shift and go to state 31

state 128

    (69) CicloWhile -> While ExprCond Do { ListInstrucao . }
    (37) ListInstrucao -> ListInstrucao . Instrucao
    (39) Instrucao -> . Atribuicao
    (40) Instrucao -> . Leitura
    (41) Instrucao -> . Escrita
    (42) Instrucao -> . Condicao
    (43) Instrucao -> . Ciclo
    (44) Instrucao -> . Ret
    (45) Atribuicao -> . Var = Expr ;
    (51) Leitura -> . READ Var ;
    (52) Escrita -> . WRITE Expr ;
    (53) Condicao -> . IF ExprCond Do { ListInstrucao } ;
    (54) Condicao -> . IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ;
    (66) Ciclo -> . CicloWhile
    (67) Ciclo -> . CicloRepeat
    (68) Ciclo -> . CicloFor
    (36) Ret -> . RET Expr ;
    (46) Var -> . ID ContinuacaoVar
    (69) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (71) CicloRepeat -> . Repeat ListInstrucao Until ExprCond
    (74) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (70) While -> . WHILE
    (72) Repeat -> . REPEAT

    }               shift and go to state 136
    READ            shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    RET             shift and go to state 29
    ID              shift and go to state 21
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    REPEAT          shift and go to state 34

    While                          shift and go to state 30
    Instrucao                      shift and go to state 91
    Atribuicao                     shift and go to state 14
    Leitura                        shift and go to state 15
    Escrita                        shift and go to state 16
    Condicao                       shift and go to state 17
    Ciclo                          shift and go to state 18
    Ret                            shift and go to state 19
    Var                            shift and go to state 22
    CicloWhile                     shift and go to state 26
    CicloRepeat                    shift and go to state 27
    CicloFor                       shift and go to state 28
    Repeat                         shift and go to state 31

state 129

    (74) CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond . Atribuicao ) { ListInstrucao }
    (45) Atribuicao -> . Var = Expr ;
    (46) Var -> . ID ContinuacaoVar

    ID              shift and go to state 21

    Atribuicao                     shift and go to state 137
    Var                            shift and go to state 22

state 130

    (76) EndCond -> ; .

    ID              reduce using rule 76 (EndCond -> ; .)


state 131

    (11) ContArray -> [ INT . ]

    ]               shift and go to state 138


state 132

    (49) ContContinuacaoVar -> [ INT . ]

    ]               shift and go to state 139


state 133

    (28) ArrayCol -> [ . INT ]

    INT             shift and go to state 140


state 134

    (27) Factor -> ID [ INT ] ArrayCol .

    *               reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    /               reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    %               reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    ;               reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    +               reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    -               reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    EQUAL           reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    NOTEQUAL        reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    BIGGER          reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    SMALLER         reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    BIGGEREQUAL     reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    SMALLEREQUAL    reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    &               reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    |               reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    DO              reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    FUNC            reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    READ            reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    WRITE           reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    IF              reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    RET             reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    ID              reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    FOR             reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    WHILE           reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    REPEAT          reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    $end            reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    UNTIL           reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)
    }               reduce using rule 27 (Factor -> ID [ INT ] ArrayCol .)


state 135

    (53) Condicao -> IF ExprCond Do { ListInstrucao } . ;
    (54) Condicao -> IF ExprCond Do { ListInstrucao } . Else { ListInstrucao } ;
    (56) Else -> . ELSE

    ;               shift and go to state 141
    ELSE            shift and go to state 143

    Else                           shift and go to state 142

state 136

    (69) CicloWhile -> While ExprCond Do { ListInstrucao } .

    FUNC            reduce using rule 69 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    READ            reduce using rule 69 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    WRITE           reduce using rule 69 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    IF              reduce using rule 69 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    RET             reduce using rule 69 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    ID              reduce using rule 69 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    FOR             reduce using rule 69 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    WHILE           reduce using rule 69 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    REPEAT          reduce using rule 69 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    $end            reduce using rule 69 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    UNTIL           reduce using rule 69 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    }               reduce using rule 69 (CicloWhile -> While ExprCond Do { ListInstrucao } .)


state 137

    (74) CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao . ) { ListInstrucao }

    )               shift and go to state 144


state 138

    (11) ContArray -> [ INT ] .

    ID              reduce using rule 11 (ContArray -> [ INT ] .)


state 139

    (49) ContContinuacaoVar -> [ INT ] .

    =               reduce using rule 49 (ContContinuacaoVar -> [ INT ] .)
    ;               reduce using rule 49 (ContContinuacaoVar -> [ INT ] .)


state 140

    (28) ArrayCol -> [ INT . ]

    ]               shift and go to state 145


state 141

    (53) Condicao -> IF ExprCond Do { ListInstrucao } ; .

    FUNC            reduce using rule 53 (Condicao -> IF ExprCond Do { ListInstrucao } ; .)
    READ            reduce using rule 53 (Condicao -> IF ExprCond Do { ListInstrucao } ; .)
    WRITE           reduce using rule 53 (Condicao -> IF ExprCond Do { ListInstrucao } ; .)
    IF              reduce using rule 53 (Condicao -> IF ExprCond Do { ListInstrucao } ; .)
    RET             reduce using rule 53 (Condicao -> IF ExprCond Do { ListInstrucao } ; .)
    ID              reduce using rule 53 (Condicao -> IF ExprCond Do { ListInstrucao } ; .)
    FOR             reduce using rule 53 (Condicao -> IF ExprCond Do { ListInstrucao } ; .)
    WHILE           reduce using rule 53 (Condicao -> IF ExprCond Do { ListInstrucao } ; .)
    REPEAT          reduce using rule 53 (Condicao -> IF ExprCond Do { ListInstrucao } ; .)
    $end            reduce using rule 53 (Condicao -> IF ExprCond Do { ListInstrucao } ; .)
    UNTIL           reduce using rule 53 (Condicao -> IF ExprCond Do { ListInstrucao } ; .)
    }               reduce using rule 53 (Condicao -> IF ExprCond Do { ListInstrucao } ; .)


state 142

    (54) Condicao -> IF ExprCond Do { ListInstrucao } Else . { ListInstrucao } ;

    {               shift and go to state 146


state 143

    (56) Else -> ELSE .

    {               reduce using rule 56 (Else -> ELSE .)


state 144

    (74) CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) . { ListInstrucao }

    {               shift and go to state 147


state 145

    (28) ArrayCol -> [ INT ] .

    *               reduce using rule 28 (ArrayCol -> [ INT ] .)
    /               reduce using rule 28 (ArrayCol -> [ INT ] .)
    %               reduce using rule 28 (ArrayCol -> [ INT ] .)
    ;               reduce using rule 28 (ArrayCol -> [ INT ] .)
    +               reduce using rule 28 (ArrayCol -> [ INT ] .)
    -               reduce using rule 28 (ArrayCol -> [ INT ] .)
    EQUAL           reduce using rule 28 (ArrayCol -> [ INT ] .)
    NOTEQUAL        reduce using rule 28 (ArrayCol -> [ INT ] .)
    BIGGER          reduce using rule 28 (ArrayCol -> [ INT ] .)
    SMALLER         reduce using rule 28 (ArrayCol -> [ INT ] .)
    BIGGEREQUAL     reduce using rule 28 (ArrayCol -> [ INT ] .)
    SMALLEREQUAL    reduce using rule 28 (ArrayCol -> [ INT ] .)
    &               reduce using rule 28 (ArrayCol -> [ INT ] .)
    |               reduce using rule 28 (ArrayCol -> [ INT ] .)
    DO              reduce using rule 28 (ArrayCol -> [ INT ] .)
    FUNC            reduce using rule 28 (ArrayCol -> [ INT ] .)
    READ            reduce using rule 28 (ArrayCol -> [ INT ] .)
    WRITE           reduce using rule 28 (ArrayCol -> [ INT ] .)
    IF              reduce using rule 28 (ArrayCol -> [ INT ] .)
    RET             reduce using rule 28 (ArrayCol -> [ INT ] .)
    ID              reduce using rule 28 (ArrayCol -> [ INT ] .)
    FOR             reduce using rule 28 (ArrayCol -> [ INT ] .)
    WHILE           reduce using rule 28 (ArrayCol -> [ INT ] .)
    REPEAT          reduce using rule 28 (ArrayCol -> [ INT ] .)
    $end            reduce using rule 28 (ArrayCol -> [ INT ] .)
    UNTIL           reduce using rule 28 (ArrayCol -> [ INT ] .)
    }               reduce using rule 28 (ArrayCol -> [ INT ] .)


state 146

    (54) Condicao -> IF ExprCond Do { ListInstrucao } Else { . ListInstrucao } ;
    (37) ListInstrucao -> . ListInstrucao Instrucao
    (38) ListInstrucao -> .

    }               reduce using rule 38 (ListInstrucao -> .)
    READ            reduce using rule 38 (ListInstrucao -> .)
    WRITE           reduce using rule 38 (ListInstrucao -> .)
    IF              reduce using rule 38 (ListInstrucao -> .)
    RET             reduce using rule 38 (ListInstrucao -> .)
    ID              reduce using rule 38 (ListInstrucao -> .)
    FOR             reduce using rule 38 (ListInstrucao -> .)
    WHILE           reduce using rule 38 (ListInstrucao -> .)
    REPEAT          reduce using rule 38 (ListInstrucao -> .)

    ListInstrucao                  shift and go to state 148

state 147

    (74) CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { . ListInstrucao }
    (37) ListInstrucao -> . ListInstrucao Instrucao
    (38) ListInstrucao -> .

    }               reduce using rule 38 (ListInstrucao -> .)
    READ            reduce using rule 38 (ListInstrucao -> .)
    WRITE           reduce using rule 38 (ListInstrucao -> .)
    IF              reduce using rule 38 (ListInstrucao -> .)
    RET             reduce using rule 38 (ListInstrucao -> .)
    ID              reduce using rule 38 (ListInstrucao -> .)
    FOR             reduce using rule 38 (ListInstrucao -> .)
    WHILE           reduce using rule 38 (ListInstrucao -> .)
    REPEAT          reduce using rule 38 (ListInstrucao -> .)

    ListInstrucao                  shift and go to state 149

state 148

    (54) Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao . } ;
    (37) ListInstrucao -> ListInstrucao . Instrucao
    (39) Instrucao -> . Atribuicao
    (40) Instrucao -> . Leitura
    (41) Instrucao -> . Escrita
    (42) Instrucao -> . Condicao
    (43) Instrucao -> . Ciclo
    (44) Instrucao -> . Ret
    (45) Atribuicao -> . Var = Expr ;
    (51) Leitura -> . READ Var ;
    (52) Escrita -> . WRITE Expr ;
    (53) Condicao -> . IF ExprCond Do { ListInstrucao } ;
    (54) Condicao -> . IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ;
    (66) Ciclo -> . CicloWhile
    (67) Ciclo -> . CicloRepeat
    (68) Ciclo -> . CicloFor
    (36) Ret -> . RET Expr ;
    (46) Var -> . ID ContinuacaoVar
    (69) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (71) CicloRepeat -> . Repeat ListInstrucao Until ExprCond
    (74) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (70) While -> . WHILE
    (72) Repeat -> . REPEAT

    }               shift and go to state 150
    READ            shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    RET             shift and go to state 29
    ID              shift and go to state 21
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    REPEAT          shift and go to state 34

    Instrucao                      shift and go to state 91
    Atribuicao                     shift and go to state 14
    Leitura                        shift and go to state 15
    Escrita                        shift and go to state 16
    Condicao                       shift and go to state 17
    Ciclo                          shift and go to state 18
    Ret                            shift and go to state 19
    Var                            shift and go to state 22
    CicloWhile                     shift and go to state 26
    CicloRepeat                    shift and go to state 27
    CicloFor                       shift and go to state 28
    While                          shift and go to state 30
    Repeat                         shift and go to state 31

state 149

    (74) CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao . }
    (37) ListInstrucao -> ListInstrucao . Instrucao
    (39) Instrucao -> . Atribuicao
    (40) Instrucao -> . Leitura
    (41) Instrucao -> . Escrita
    (42) Instrucao -> . Condicao
    (43) Instrucao -> . Ciclo
    (44) Instrucao -> . Ret
    (45) Atribuicao -> . Var = Expr ;
    (51) Leitura -> . READ Var ;
    (52) Escrita -> . WRITE Expr ;
    (53) Condicao -> . IF ExprCond Do { ListInstrucao } ;
    (54) Condicao -> . IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ;
    (66) Ciclo -> . CicloWhile
    (67) Ciclo -> . CicloRepeat
    (68) Ciclo -> . CicloFor
    (36) Ret -> . RET Expr ;
    (46) Var -> . ID ContinuacaoVar
    (69) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (71) CicloRepeat -> . Repeat ListInstrucao Until ExprCond
    (74) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (70) While -> . WHILE
    (72) Repeat -> . REPEAT

    }               shift and go to state 151
    READ            shift and go to state 23
    WRITE           shift and go to state 24
    IF              shift and go to state 25
    RET             shift and go to state 29
    ID              shift and go to state 21
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    REPEAT          shift and go to state 34

    Atribuicao                     shift and go to state 14
    Instrucao                      shift and go to state 91
    Leitura                        shift and go to state 15
    Escrita                        shift and go to state 16
    Condicao                       shift and go to state 17
    Ciclo                          shift and go to state 18
    Ret                            shift and go to state 19
    Var                            shift and go to state 22
    CicloWhile                     shift and go to state 26
    CicloRepeat                    shift and go to state 27
    CicloFor                       shift and go to state 28
    While                          shift and go to state 30
    Repeat                         shift and go to state 31

state 150

    (54) Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } . ;

    ;               shift and go to state 152


state 151

    (74) CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .

    FUNC            reduce using rule 74 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    READ            reduce using rule 74 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    WRITE           reduce using rule 74 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    IF              reduce using rule 74 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    RET             reduce using rule 74 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    ID              reduce using rule 74 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    FOR             reduce using rule 74 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    WHILE           reduce using rule 74 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    REPEAT          reduce using rule 74 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    $end            reduce using rule 74 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    UNTIL           reduce using rule 74 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    }               reduce using rule 74 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)


state 152

    (54) Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ; .

    FUNC            reduce using rule 54 (Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ; .)
    READ            reduce using rule 54 (Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ; .)
    WRITE           reduce using rule 54 (Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ; .)
    IF              reduce using rule 54 (Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ; .)
    RET             reduce using rule 54 (Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ; .)
    ID              reduce using rule 54 (Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ; .)
    FOR             reduce using rule 54 (Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ; .)
    WHILE           reduce using rule 54 (Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ; .)
    REPEAT          reduce using rule 54 (Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ; .)
    $end            reduce using rule 54 (Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ; .)
    UNTIL           reduce using rule 54 (Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ; .)
    }               reduce using rule 54 (Condicao -> IF ExprCond Do { ListInstrucao } Else { ListInstrucao } ; .)


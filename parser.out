Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Inicio
Rule 1     Inicio -> Start Variaveis Codigo
Rule 2     Start -> <empty>
Rule 3     Variaveis -> { Declaracoes }
Rule 4     Declaracoes -> Declaracao Declaracoes
Rule 5     Declaracoes -> <empty>
Rule 6     Declaracao -> Type ContinuacaoDeclaracao
Rule 7     Type -> ID
Rule 8     ContinuacaoDeclaracao -> ID ContContinuacaoDeclaracao
Rule 9     ContinuacaoDeclaracao -> Array ID ;
Rule 10    ContContinuacaoDeclaracao -> = Expr ;
Rule 11    ContContinuacaoDeclaracao -> ;
Rule 12    Array -> [ INT ] ContArray
Rule 13    ContArray -> [ INT ]
Rule 14    ContArray -> <empty>
Rule 15    Expr -> Expr ContinuacaoExpr
Rule 16    Expr -> Term
Rule 17    ContinuacaoExpr -> + Term
Rule 18    ContinuacaoExpr -> - Term
Rule 19    Term -> Term ContinuacaoTerm
Rule 20    Term -> Factor
Rule 21    ContinuacaoTerm -> * Factor
Rule 22    ContinuacaoTerm -> / Factor
Rule 23    ContinuacaoTerm -> % Factor
Rule 24    Factor -> INT
Rule 25    Factor -> - INT
Rule 26    Factor -> FLOAT
Rule 27    Factor -> - FLOAT
Rule 28    Factor -> ID ContinuacaoFactor
Rule 29    ContinuacaoFactor -> [ INT ] ContContinuacaoFactor
Rule 30    ContinuacaoFactor -> <empty>
Rule 31    ContContinuacaoFactor -> [ INT ]
Rule 32    ContContinuacaoFactor -> <empty>
Rule 33    Factor -> CALL ID
Rule 34    Codigo -> Funcao Codigo
Rule 35    Codigo -> Instrucao Codigo
Rule 36    Codigo -> <empty>
Rule 37    Funcao -> DecFunc { Variaveis ListInstrucao Ret }
Rule 38    DecFunc -> FUNC ID
Rule 39    Ret -> RET Expr ;
Rule 40    ListInstrucao -> Instrucao ListInstrucao
Rule 41    ListInstrucao -> <empty>
Rule 42    Instrucao -> Atribuicao
Rule 43    Instrucao -> Leitura
Rule 44    Instrucao -> Escrita
Rule 45    Instrucao -> Condicao
Rule 46    Instrucao -> Ciclo
Rule 47    Atribuicao -> Var = Expr ;
Rule 48    Var -> ID ContinuacaoVar
Rule 49    ContinuacaoVar -> [ INT ] ContContinuacaoVar
Rule 50    ContinuacaoVar -> <empty>
Rule 51    ContContinuacaoVar -> [ INT ]
Rule 52    ContContinuacaoVar -> <empty>
Rule 53    Leitura -> READ Var ;
Rule 54    Escrita -> WRITE Var ;
Rule 55    Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf
Rule 56    ContinuacaoIf -> Else ListInstrucao ;
Rule 57    ContinuacaoIf -> ;
Rule 58    Do -> DO
Rule 59    Else -> ELSE
Rule 60    ExprCond -> ExprCond ContinuacaoExprCond
Rule 61    ExprCond -> Cond
Rule 62    ContinuacaoExprCond -> & Cond
Rule 63    ContinuacaoExprCond -> | Cond
Rule 64    Cond -> Expr ContinuacaoCond
Rule 65    ContinuacaoCond -> EQUAL Expr
Rule 66    ContinuacaoCond -> BIGGER Expr
Rule 67    ContinuacaoCond -> BIGGEREQUAL Expr
Rule 68    ContinuacaoCond -> SMALLER Expr
Rule 69    ContinuacaoCond -> SMALLEREQUAL Expr
Rule 70    Ciclo -> CicloWhile
Rule 71    Ciclo -> CicloRepeat
Rule 72    Ciclo -> CicloFor
Rule 73    CicloWhile -> While ExprCond Do { ListInstrucao }
Rule 74    While -> WHILE
Rule 75    CicloRepeat -> Repeat { ListInstrucao } Until ExprCond
Rule 76    Repeat -> REPEAT
Rule 77    Until -> UNTIL
Rule 78    CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
Rule 79    AtribuicaoInicial -> Atribuicao
Rule 80    EndCond -> ;

Terminals, with rules where they appear

%                    : 23
&                    : 62
(                    : 78
)                    : 78
*                    : 21
+                    : 17
-                    : 18 25 27
/                    : 22
;                    : 9 10 11 39 47 53 54 56 57 80
=                    : 10 47
BIGGER               : 66
BIGGEREQUAL          : 67
CALL                 : 33
DO                   : 58
ELSE                 : 59
EQUAL                : 65
FLOAT                : 26 27
FOR                  : 78
FUNC                 : 38
ID                   : 7 8 9 28 33 38 48
IF                   : 55
INT                  : 12 13 24 25 29 31 49 51
READ                 : 53
REPEAT               : 76
RET                  : 39
SMALLER              : 68
SMALLEREQUAL         : 69
UNTIL                : 77
WHILE                : 74
WRITE                : 54
[                    : 12 13 29 31 49 51
]                    : 12 13 29 31 49 51
error                : 
{                    : 3 37 73 75 78
|                    : 63
}                    : 3 37 73 75 78

Nonterminals, with rules where they appear

Array                : 9
Atribuicao           : 42 78 79
AtribuicaoInicial    : 78
Ciclo                : 46
CicloFor             : 72
CicloRepeat          : 71
CicloWhile           : 70
Codigo               : 1 34 35
Cond                 : 61 62 63
Condicao             : 45
ContArray            : 12
ContContinuacaoDeclaracao : 8
ContContinuacaoFactor : 29
ContContinuacaoVar   : 49
ContinuacaoCond      : 64
ContinuacaoDeclaracao : 6
ContinuacaoExpr      : 15
ContinuacaoExprCond  : 60
ContinuacaoFactor    : 28
ContinuacaoIf        : 55
ContinuacaoTerm      : 19
ContinuacaoVar       : 48
DecFunc              : 37
Declaracao           : 4
Declaracoes          : 3 4
Do                   : 55 73
Else                 : 56
EndCond              : 78
Escrita              : 44
Expr                 : 10 15 39 47 64 65 66 67 68 69
ExprCond             : 55 60 73 75 78
Factor               : 20 21 22 23
Funcao               : 34
Inicio               : 0
Instrucao            : 35 40
Leitura              : 43
ListInstrucao        : 37 40 55 56 73 75 78
Repeat               : 75
Ret                  : 37
Start                : 1
Term                 : 16 17 18 19
Type                 : 6
Until                : 75
Var                  : 47 53 54
Variaveis            : 1 37
While                : 73

Parsing method: LALR

state 0

    (0) S' -> . Inicio
    (1) Inicio -> . Start Variaveis Codigo
    (2) Start -> .

    {               reduce using rule 2 (Start -> .)

    Inicio                         shift and go to state 1
    Start                          shift and go to state 2

state 1

    (0) S' -> Inicio .



state 2

    (1) Inicio -> Start . Variaveis Codigo
    (3) Variaveis -> . { Declaracoes }

    {               shift and go to state 4

    Variaveis                      shift and go to state 3

state 3

    (1) Inicio -> Start Variaveis . Codigo
    (34) Codigo -> . Funcao Codigo
    (35) Codigo -> . Instrucao Codigo
    (36) Codigo -> .
    (37) Funcao -> . DecFunc { Variaveis ListInstrucao Ret }
    (42) Instrucao -> . Atribuicao
    (43) Instrucao -> . Leitura
    (44) Instrucao -> . Escrita
    (45) Instrucao -> . Condicao
    (46) Instrucao -> . Ciclo
    (38) DecFunc -> . FUNC ID
    (47) Atribuicao -> . Var = Expr ;
    (53) Leitura -> . READ Var ;
    (54) Escrita -> . WRITE Var ;
    (55) Condicao -> . IF ExprCond Do ListInstrucao ContinuacaoIf
    (70) Ciclo -> . CicloWhile
    (71) Ciclo -> . CicloRepeat
    (72) Ciclo -> . CicloFor
    (48) Var -> . ID ContinuacaoVar
    (73) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (75) CicloRepeat -> . Repeat { ListInstrucao } Until ExprCond
    (78) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (74) While -> . WHILE
    (76) Repeat -> . REPEAT

    $end            reduce using rule 36 (Codigo -> .)
    FUNC            shift and go to state 14
    READ            shift and go to state 17
    WRITE           shift and go to state 18
    IF              shift and go to state 19
    ID              shift and go to state 15
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    REPEAT          shift and go to state 27

    Codigo                         shift and go to state 5
    Funcao                         shift and go to state 6
    Instrucao                      shift and go to state 7
    DecFunc                        shift and go to state 8
    Atribuicao                     shift and go to state 9
    Leitura                        shift and go to state 10
    Escrita                        shift and go to state 11
    Condicao                       shift and go to state 12
    Ciclo                          shift and go to state 13
    Var                            shift and go to state 16
    CicloWhile                     shift and go to state 20
    CicloRepeat                    shift and go to state 21
    CicloFor                       shift and go to state 22
    While                          shift and go to state 23
    Repeat                         shift and go to state 24

state 4

    (3) Variaveis -> { . Declaracoes }
    (4) Declaracoes -> . Declaracao Declaracoes
    (5) Declaracoes -> .
    (6) Declaracao -> . Type ContinuacaoDeclaracao
    (7) Type -> . ID

    }               reduce using rule 5 (Declaracoes -> .)
    ID              shift and go to state 31

    Declaracoes                    shift and go to state 28
    Declaracao                     shift and go to state 29
    Type                           shift and go to state 30

state 5

    (1) Inicio -> Start Variaveis Codigo .

    $end            reduce using rule 1 (Inicio -> Start Variaveis Codigo .)


state 6

    (34) Codigo -> Funcao . Codigo
    (34) Codigo -> . Funcao Codigo
    (35) Codigo -> . Instrucao Codigo
    (36) Codigo -> .
    (37) Funcao -> . DecFunc { Variaveis ListInstrucao Ret }
    (42) Instrucao -> . Atribuicao
    (43) Instrucao -> . Leitura
    (44) Instrucao -> . Escrita
    (45) Instrucao -> . Condicao
    (46) Instrucao -> . Ciclo
    (38) DecFunc -> . FUNC ID
    (47) Atribuicao -> . Var = Expr ;
    (53) Leitura -> . READ Var ;
    (54) Escrita -> . WRITE Var ;
    (55) Condicao -> . IF ExprCond Do ListInstrucao ContinuacaoIf
    (70) Ciclo -> . CicloWhile
    (71) Ciclo -> . CicloRepeat
    (72) Ciclo -> . CicloFor
    (48) Var -> . ID ContinuacaoVar
    (73) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (75) CicloRepeat -> . Repeat { ListInstrucao } Until ExprCond
    (78) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (74) While -> . WHILE
    (76) Repeat -> . REPEAT

    $end            reduce using rule 36 (Codigo -> .)
    FUNC            shift and go to state 14
    READ            shift and go to state 17
    WRITE           shift and go to state 18
    IF              shift and go to state 19
    ID              shift and go to state 15
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    REPEAT          shift and go to state 27

    Funcao                         shift and go to state 6
    Codigo                         shift and go to state 32
    Instrucao                      shift and go to state 7
    DecFunc                        shift and go to state 8
    Atribuicao                     shift and go to state 9
    Leitura                        shift and go to state 10
    Escrita                        shift and go to state 11
    Condicao                       shift and go to state 12
    Ciclo                          shift and go to state 13
    Var                            shift and go to state 16
    CicloWhile                     shift and go to state 20
    CicloRepeat                    shift and go to state 21
    CicloFor                       shift and go to state 22
    While                          shift and go to state 23
    Repeat                         shift and go to state 24

state 7

    (35) Codigo -> Instrucao . Codigo
    (34) Codigo -> . Funcao Codigo
    (35) Codigo -> . Instrucao Codigo
    (36) Codigo -> .
    (37) Funcao -> . DecFunc { Variaveis ListInstrucao Ret }
    (42) Instrucao -> . Atribuicao
    (43) Instrucao -> . Leitura
    (44) Instrucao -> . Escrita
    (45) Instrucao -> . Condicao
    (46) Instrucao -> . Ciclo
    (38) DecFunc -> . FUNC ID
    (47) Atribuicao -> . Var = Expr ;
    (53) Leitura -> . READ Var ;
    (54) Escrita -> . WRITE Var ;
    (55) Condicao -> . IF ExprCond Do ListInstrucao ContinuacaoIf
    (70) Ciclo -> . CicloWhile
    (71) Ciclo -> . CicloRepeat
    (72) Ciclo -> . CicloFor
    (48) Var -> . ID ContinuacaoVar
    (73) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (75) CicloRepeat -> . Repeat { ListInstrucao } Until ExprCond
    (78) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (74) While -> . WHILE
    (76) Repeat -> . REPEAT

    $end            reduce using rule 36 (Codigo -> .)
    FUNC            shift and go to state 14
    READ            shift and go to state 17
    WRITE           shift and go to state 18
    IF              shift and go to state 19
    ID              shift and go to state 15
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    REPEAT          shift and go to state 27

    Instrucao                      shift and go to state 7
    Codigo                         shift and go to state 33
    Funcao                         shift and go to state 6
    DecFunc                        shift and go to state 8
    Atribuicao                     shift and go to state 9
    Leitura                        shift and go to state 10
    Escrita                        shift and go to state 11
    Condicao                       shift and go to state 12
    Ciclo                          shift and go to state 13
    Var                            shift and go to state 16
    CicloWhile                     shift and go to state 20
    CicloRepeat                    shift and go to state 21
    CicloFor                       shift and go to state 22
    While                          shift and go to state 23
    Repeat                         shift and go to state 24

state 8

    (37) Funcao -> DecFunc . { Variaveis ListInstrucao Ret }

    {               shift and go to state 34


state 9

    (42) Instrucao -> Atribuicao .

    FUNC            reduce using rule 42 (Instrucao -> Atribuicao .)
    READ            reduce using rule 42 (Instrucao -> Atribuicao .)
    WRITE           reduce using rule 42 (Instrucao -> Atribuicao .)
    IF              reduce using rule 42 (Instrucao -> Atribuicao .)
    ID              reduce using rule 42 (Instrucao -> Atribuicao .)
    FOR             reduce using rule 42 (Instrucao -> Atribuicao .)
    WHILE           reduce using rule 42 (Instrucao -> Atribuicao .)
    REPEAT          reduce using rule 42 (Instrucao -> Atribuicao .)
    $end            reduce using rule 42 (Instrucao -> Atribuicao .)
    }               reduce using rule 42 (Instrucao -> Atribuicao .)
    RET             reduce using rule 42 (Instrucao -> Atribuicao .)
    ;               reduce using rule 42 (Instrucao -> Atribuicao .)
    ELSE            reduce using rule 42 (Instrucao -> Atribuicao .)


state 10

    (43) Instrucao -> Leitura .

    FUNC            reduce using rule 43 (Instrucao -> Leitura .)
    READ            reduce using rule 43 (Instrucao -> Leitura .)
    WRITE           reduce using rule 43 (Instrucao -> Leitura .)
    IF              reduce using rule 43 (Instrucao -> Leitura .)
    ID              reduce using rule 43 (Instrucao -> Leitura .)
    FOR             reduce using rule 43 (Instrucao -> Leitura .)
    WHILE           reduce using rule 43 (Instrucao -> Leitura .)
    REPEAT          reduce using rule 43 (Instrucao -> Leitura .)
    $end            reduce using rule 43 (Instrucao -> Leitura .)
    }               reduce using rule 43 (Instrucao -> Leitura .)
    RET             reduce using rule 43 (Instrucao -> Leitura .)
    ;               reduce using rule 43 (Instrucao -> Leitura .)
    ELSE            reduce using rule 43 (Instrucao -> Leitura .)


state 11

    (44) Instrucao -> Escrita .

    FUNC            reduce using rule 44 (Instrucao -> Escrita .)
    READ            reduce using rule 44 (Instrucao -> Escrita .)
    WRITE           reduce using rule 44 (Instrucao -> Escrita .)
    IF              reduce using rule 44 (Instrucao -> Escrita .)
    ID              reduce using rule 44 (Instrucao -> Escrita .)
    FOR             reduce using rule 44 (Instrucao -> Escrita .)
    WHILE           reduce using rule 44 (Instrucao -> Escrita .)
    REPEAT          reduce using rule 44 (Instrucao -> Escrita .)
    $end            reduce using rule 44 (Instrucao -> Escrita .)
    }               reduce using rule 44 (Instrucao -> Escrita .)
    RET             reduce using rule 44 (Instrucao -> Escrita .)
    ;               reduce using rule 44 (Instrucao -> Escrita .)
    ELSE            reduce using rule 44 (Instrucao -> Escrita .)


state 12

    (45) Instrucao -> Condicao .

    FUNC            reduce using rule 45 (Instrucao -> Condicao .)
    READ            reduce using rule 45 (Instrucao -> Condicao .)
    WRITE           reduce using rule 45 (Instrucao -> Condicao .)
    IF              reduce using rule 45 (Instrucao -> Condicao .)
    ID              reduce using rule 45 (Instrucao -> Condicao .)
    FOR             reduce using rule 45 (Instrucao -> Condicao .)
    WHILE           reduce using rule 45 (Instrucao -> Condicao .)
    REPEAT          reduce using rule 45 (Instrucao -> Condicao .)
    $end            reduce using rule 45 (Instrucao -> Condicao .)
    }               reduce using rule 45 (Instrucao -> Condicao .)
    RET             reduce using rule 45 (Instrucao -> Condicao .)
    ;               reduce using rule 45 (Instrucao -> Condicao .)
    ELSE            reduce using rule 45 (Instrucao -> Condicao .)


state 13

    (46) Instrucao -> Ciclo .

    FUNC            reduce using rule 46 (Instrucao -> Ciclo .)
    READ            reduce using rule 46 (Instrucao -> Ciclo .)
    WRITE           reduce using rule 46 (Instrucao -> Ciclo .)
    IF              reduce using rule 46 (Instrucao -> Ciclo .)
    ID              reduce using rule 46 (Instrucao -> Ciclo .)
    FOR             reduce using rule 46 (Instrucao -> Ciclo .)
    WHILE           reduce using rule 46 (Instrucao -> Ciclo .)
    REPEAT          reduce using rule 46 (Instrucao -> Ciclo .)
    $end            reduce using rule 46 (Instrucao -> Ciclo .)
    }               reduce using rule 46 (Instrucao -> Ciclo .)
    RET             reduce using rule 46 (Instrucao -> Ciclo .)
    ;               reduce using rule 46 (Instrucao -> Ciclo .)
    ELSE            reduce using rule 46 (Instrucao -> Ciclo .)


state 14

    (38) DecFunc -> FUNC . ID

    ID              shift and go to state 35


state 15

    (48) Var -> ID . ContinuacaoVar
    (49) ContinuacaoVar -> . [ INT ] ContContinuacaoVar
    (50) ContinuacaoVar -> .

    [               shift and go to state 37
    =               reduce using rule 50 (ContinuacaoVar -> .)
    ;               reduce using rule 50 (ContinuacaoVar -> .)

    ContinuacaoVar                 shift and go to state 36

state 16

    (47) Atribuicao -> Var . = Expr ;

    =               shift and go to state 38


state 17

    (53) Leitura -> READ . Var ;
    (48) Var -> . ID ContinuacaoVar

    ID              shift and go to state 15

    Var                            shift and go to state 39

state 18

    (54) Escrita -> WRITE . Var ;
    (48) Var -> . ID ContinuacaoVar

    ID              shift and go to state 15

    Var                            shift and go to state 40

state 19

    (55) Condicao -> IF . ExprCond Do ListInstrucao ContinuacaoIf
    (60) ExprCond -> . ExprCond ContinuacaoExprCond
    (61) ExprCond -> . Cond
    (64) Cond -> . Expr ContinuacaoCond
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    ExprCond                       shift and go to state 41
    Cond                           shift and go to state 42
    Expr                           shift and go to state 43
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 20

    (70) Ciclo -> CicloWhile .

    FUNC            reduce using rule 70 (Ciclo -> CicloWhile .)
    READ            reduce using rule 70 (Ciclo -> CicloWhile .)
    WRITE           reduce using rule 70 (Ciclo -> CicloWhile .)
    IF              reduce using rule 70 (Ciclo -> CicloWhile .)
    ID              reduce using rule 70 (Ciclo -> CicloWhile .)
    FOR             reduce using rule 70 (Ciclo -> CicloWhile .)
    WHILE           reduce using rule 70 (Ciclo -> CicloWhile .)
    REPEAT          reduce using rule 70 (Ciclo -> CicloWhile .)
    $end            reduce using rule 70 (Ciclo -> CicloWhile .)
    }               reduce using rule 70 (Ciclo -> CicloWhile .)
    RET             reduce using rule 70 (Ciclo -> CicloWhile .)
    ;               reduce using rule 70 (Ciclo -> CicloWhile .)
    ELSE            reduce using rule 70 (Ciclo -> CicloWhile .)


state 21

    (71) Ciclo -> CicloRepeat .

    FUNC            reduce using rule 71 (Ciclo -> CicloRepeat .)
    READ            reduce using rule 71 (Ciclo -> CicloRepeat .)
    WRITE           reduce using rule 71 (Ciclo -> CicloRepeat .)
    IF              reduce using rule 71 (Ciclo -> CicloRepeat .)
    ID              reduce using rule 71 (Ciclo -> CicloRepeat .)
    FOR             reduce using rule 71 (Ciclo -> CicloRepeat .)
    WHILE           reduce using rule 71 (Ciclo -> CicloRepeat .)
    REPEAT          reduce using rule 71 (Ciclo -> CicloRepeat .)
    $end            reduce using rule 71 (Ciclo -> CicloRepeat .)
    }               reduce using rule 71 (Ciclo -> CicloRepeat .)
    RET             reduce using rule 71 (Ciclo -> CicloRepeat .)
    ;               reduce using rule 71 (Ciclo -> CicloRepeat .)
    ELSE            reduce using rule 71 (Ciclo -> CicloRepeat .)


state 22

    (72) Ciclo -> CicloFor .

    FUNC            reduce using rule 72 (Ciclo -> CicloFor .)
    READ            reduce using rule 72 (Ciclo -> CicloFor .)
    WRITE           reduce using rule 72 (Ciclo -> CicloFor .)
    IF              reduce using rule 72 (Ciclo -> CicloFor .)
    ID              reduce using rule 72 (Ciclo -> CicloFor .)
    FOR             reduce using rule 72 (Ciclo -> CicloFor .)
    WHILE           reduce using rule 72 (Ciclo -> CicloFor .)
    REPEAT          reduce using rule 72 (Ciclo -> CicloFor .)
    $end            reduce using rule 72 (Ciclo -> CicloFor .)
    }               reduce using rule 72 (Ciclo -> CicloFor .)
    RET             reduce using rule 72 (Ciclo -> CicloFor .)
    ;               reduce using rule 72 (Ciclo -> CicloFor .)
    ELSE            reduce using rule 72 (Ciclo -> CicloFor .)


state 23

    (73) CicloWhile -> While . ExprCond Do { ListInstrucao }
    (60) ExprCond -> . ExprCond ContinuacaoExprCond
    (61) ExprCond -> . Cond
    (64) Cond -> . Expr ContinuacaoCond
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    ExprCond                       shift and go to state 51
    Cond                           shift and go to state 42
    Expr                           shift and go to state 43
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 24

    (75) CicloRepeat -> Repeat . { ListInstrucao } Until ExprCond

    {               shift and go to state 52


state 25

    (78) CicloFor -> FOR . ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }

    (               shift and go to state 53


state 26

    (74) While -> WHILE .

    INT             reduce using rule 74 (While -> WHILE .)
    -               reduce using rule 74 (While -> WHILE .)
    FLOAT           reduce using rule 74 (While -> WHILE .)
    ID              reduce using rule 74 (While -> WHILE .)
    CALL            reduce using rule 74 (While -> WHILE .)


state 27

    (76) Repeat -> REPEAT .

    {               reduce using rule 76 (Repeat -> REPEAT .)


state 28

    (3) Variaveis -> { Declaracoes . }

    }               shift and go to state 54


state 29

    (4) Declaracoes -> Declaracao . Declaracoes
    (4) Declaracoes -> . Declaracao Declaracoes
    (5) Declaracoes -> .
    (6) Declaracao -> . Type ContinuacaoDeclaracao
    (7) Type -> . ID

    }               reduce using rule 5 (Declaracoes -> .)
    ID              shift and go to state 31

    Declaracao                     shift and go to state 29
    Declaracoes                    shift and go to state 55
    Type                           shift and go to state 30

state 30

    (6) Declaracao -> Type . ContinuacaoDeclaracao
    (8) ContinuacaoDeclaracao -> . ID ContContinuacaoDeclaracao
    (9) ContinuacaoDeclaracao -> . Array ID ;
    (12) Array -> . [ INT ] ContArray

    ID              shift and go to state 57
    [               shift and go to state 59

    ContinuacaoDeclaracao          shift and go to state 56
    Array                          shift and go to state 58

state 31

    (7) Type -> ID .

    ID              reduce using rule 7 (Type -> ID .)
    [               reduce using rule 7 (Type -> ID .)


state 32

    (34) Codigo -> Funcao Codigo .

    $end            reduce using rule 34 (Codigo -> Funcao Codigo .)


state 33

    (35) Codigo -> Instrucao Codigo .

    $end            reduce using rule 35 (Codigo -> Instrucao Codigo .)


state 34

    (37) Funcao -> DecFunc { . Variaveis ListInstrucao Ret }
    (3) Variaveis -> . { Declaracoes }

    {               shift and go to state 4

    Variaveis                      shift and go to state 60

state 35

    (38) DecFunc -> FUNC ID .

    {               reduce using rule 38 (DecFunc -> FUNC ID .)


state 36

    (48) Var -> ID ContinuacaoVar .

    =               reduce using rule 48 (Var -> ID ContinuacaoVar .)
    ;               reduce using rule 48 (Var -> ID ContinuacaoVar .)


state 37

    (49) ContinuacaoVar -> [ . INT ] ContContinuacaoVar

    INT             shift and go to state 61


state 38

    (47) Atribuicao -> Var = . Expr ;
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Expr                           shift and go to state 62
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 39

    (53) Leitura -> READ Var . ;

    ;               shift and go to state 63


state 40

    (54) Escrita -> WRITE Var . ;

    ;               shift and go to state 64


state 41

    (55) Condicao -> IF ExprCond . Do ListInstrucao ContinuacaoIf
    (60) ExprCond -> ExprCond . ContinuacaoExprCond
    (58) Do -> . DO
    (62) ContinuacaoExprCond -> . & Cond
    (63) ContinuacaoExprCond -> . | Cond

    DO              shift and go to state 67
    &               shift and go to state 68
    |               shift and go to state 69

    Do                             shift and go to state 65
    ContinuacaoExprCond            shift and go to state 66

state 42

    (61) ExprCond -> Cond .

    DO              reduce using rule 61 (ExprCond -> Cond .)
    &               reduce using rule 61 (ExprCond -> Cond .)
    |               reduce using rule 61 (ExprCond -> Cond .)
    ;               reduce using rule 61 (ExprCond -> Cond .)
    FUNC            reduce using rule 61 (ExprCond -> Cond .)
    READ            reduce using rule 61 (ExprCond -> Cond .)
    WRITE           reduce using rule 61 (ExprCond -> Cond .)
    IF              reduce using rule 61 (ExprCond -> Cond .)
    ID              reduce using rule 61 (ExprCond -> Cond .)
    FOR             reduce using rule 61 (ExprCond -> Cond .)
    WHILE           reduce using rule 61 (ExprCond -> Cond .)
    REPEAT          reduce using rule 61 (ExprCond -> Cond .)
    $end            reduce using rule 61 (ExprCond -> Cond .)
    }               reduce using rule 61 (ExprCond -> Cond .)
    RET             reduce using rule 61 (ExprCond -> Cond .)
    ELSE            reduce using rule 61 (ExprCond -> Cond .)


state 43

    (64) Cond -> Expr . ContinuacaoCond
    (15) Expr -> Expr . ContinuacaoExpr
    (65) ContinuacaoCond -> . EQUAL Expr
    (66) ContinuacaoCond -> . BIGGER Expr
    (67) ContinuacaoCond -> . BIGGEREQUAL Expr
    (68) ContinuacaoCond -> . SMALLER Expr
    (69) ContinuacaoCond -> . SMALLEREQUAL Expr
    (17) ContinuacaoExpr -> . + Term
    (18) ContinuacaoExpr -> . - Term

    EQUAL           shift and go to state 72
    BIGGER          shift and go to state 73
    BIGGEREQUAL     shift and go to state 74
    SMALLER         shift and go to state 75
    SMALLEREQUAL    shift and go to state 76
    +               shift and go to state 77
    -               shift and go to state 78

    ContinuacaoCond                shift and go to state 70
    ContinuacaoExpr                shift and go to state 71

state 44

    (16) Expr -> Term .
    (19) Term -> Term . ContinuacaoTerm
    (21) ContinuacaoTerm -> . * Factor
    (22) ContinuacaoTerm -> . / Factor
    (23) ContinuacaoTerm -> . % Factor

    EQUAL           reduce using rule 16 (Expr -> Term .)
    BIGGER          reduce using rule 16 (Expr -> Term .)
    BIGGEREQUAL     reduce using rule 16 (Expr -> Term .)
    SMALLER         reduce using rule 16 (Expr -> Term .)
    SMALLEREQUAL    reduce using rule 16 (Expr -> Term .)
    +               reduce using rule 16 (Expr -> Term .)
    -               reduce using rule 16 (Expr -> Term .)
    ;               reduce using rule 16 (Expr -> Term .)
    DO              reduce using rule 16 (Expr -> Term .)
    &               reduce using rule 16 (Expr -> Term .)
    |               reduce using rule 16 (Expr -> Term .)
    FUNC            reduce using rule 16 (Expr -> Term .)
    READ            reduce using rule 16 (Expr -> Term .)
    WRITE           reduce using rule 16 (Expr -> Term .)
    IF              reduce using rule 16 (Expr -> Term .)
    ID              reduce using rule 16 (Expr -> Term .)
    FOR             reduce using rule 16 (Expr -> Term .)
    WHILE           reduce using rule 16 (Expr -> Term .)
    REPEAT          reduce using rule 16 (Expr -> Term .)
    $end            reduce using rule 16 (Expr -> Term .)
    }               reduce using rule 16 (Expr -> Term .)
    RET             reduce using rule 16 (Expr -> Term .)
    ELSE            reduce using rule 16 (Expr -> Term .)
    *               shift and go to state 80
    /               shift and go to state 81
    %               shift and go to state 82

    ContinuacaoTerm                shift and go to state 79

state 45

    (20) Term -> Factor .

    *               reduce using rule 20 (Term -> Factor .)
    /               reduce using rule 20 (Term -> Factor .)
    %               reduce using rule 20 (Term -> Factor .)
    EQUAL           reduce using rule 20 (Term -> Factor .)
    BIGGER          reduce using rule 20 (Term -> Factor .)
    BIGGEREQUAL     reduce using rule 20 (Term -> Factor .)
    SMALLER         reduce using rule 20 (Term -> Factor .)
    SMALLEREQUAL    reduce using rule 20 (Term -> Factor .)
    +               reduce using rule 20 (Term -> Factor .)
    -               reduce using rule 20 (Term -> Factor .)
    ;               reduce using rule 20 (Term -> Factor .)
    DO              reduce using rule 20 (Term -> Factor .)
    &               reduce using rule 20 (Term -> Factor .)
    |               reduce using rule 20 (Term -> Factor .)
    FUNC            reduce using rule 20 (Term -> Factor .)
    READ            reduce using rule 20 (Term -> Factor .)
    WRITE           reduce using rule 20 (Term -> Factor .)
    IF              reduce using rule 20 (Term -> Factor .)
    ID              reduce using rule 20 (Term -> Factor .)
    FOR             reduce using rule 20 (Term -> Factor .)
    WHILE           reduce using rule 20 (Term -> Factor .)
    REPEAT          reduce using rule 20 (Term -> Factor .)
    $end            reduce using rule 20 (Term -> Factor .)
    }               reduce using rule 20 (Term -> Factor .)
    RET             reduce using rule 20 (Term -> Factor .)
    ELSE            reduce using rule 20 (Term -> Factor .)


state 46

    (24) Factor -> INT .

    *               reduce using rule 24 (Factor -> INT .)
    /               reduce using rule 24 (Factor -> INT .)
    %               reduce using rule 24 (Factor -> INT .)
    EQUAL           reduce using rule 24 (Factor -> INT .)
    BIGGER          reduce using rule 24 (Factor -> INT .)
    BIGGEREQUAL     reduce using rule 24 (Factor -> INT .)
    SMALLER         reduce using rule 24 (Factor -> INT .)
    SMALLEREQUAL    reduce using rule 24 (Factor -> INT .)
    +               reduce using rule 24 (Factor -> INT .)
    -               reduce using rule 24 (Factor -> INT .)
    ;               reduce using rule 24 (Factor -> INT .)
    DO              reduce using rule 24 (Factor -> INT .)
    &               reduce using rule 24 (Factor -> INT .)
    |               reduce using rule 24 (Factor -> INT .)
    FUNC            reduce using rule 24 (Factor -> INT .)
    READ            reduce using rule 24 (Factor -> INT .)
    WRITE           reduce using rule 24 (Factor -> INT .)
    IF              reduce using rule 24 (Factor -> INT .)
    ID              reduce using rule 24 (Factor -> INT .)
    FOR             reduce using rule 24 (Factor -> INT .)
    WHILE           reduce using rule 24 (Factor -> INT .)
    REPEAT          reduce using rule 24 (Factor -> INT .)
    $end            reduce using rule 24 (Factor -> INT .)
    }               reduce using rule 24 (Factor -> INT .)
    RET             reduce using rule 24 (Factor -> INT .)
    ELSE            reduce using rule 24 (Factor -> INT .)


state 47

    (25) Factor -> - . INT
    (27) Factor -> - . FLOAT

    INT             shift and go to state 83
    FLOAT           shift and go to state 84


state 48

    (26) Factor -> FLOAT .

    *               reduce using rule 26 (Factor -> FLOAT .)
    /               reduce using rule 26 (Factor -> FLOAT .)
    %               reduce using rule 26 (Factor -> FLOAT .)
    EQUAL           reduce using rule 26 (Factor -> FLOAT .)
    BIGGER          reduce using rule 26 (Factor -> FLOAT .)
    BIGGEREQUAL     reduce using rule 26 (Factor -> FLOAT .)
    SMALLER         reduce using rule 26 (Factor -> FLOAT .)
    SMALLEREQUAL    reduce using rule 26 (Factor -> FLOAT .)
    +               reduce using rule 26 (Factor -> FLOAT .)
    -               reduce using rule 26 (Factor -> FLOAT .)
    ;               reduce using rule 26 (Factor -> FLOAT .)
    DO              reduce using rule 26 (Factor -> FLOAT .)
    &               reduce using rule 26 (Factor -> FLOAT .)
    |               reduce using rule 26 (Factor -> FLOAT .)
    FUNC            reduce using rule 26 (Factor -> FLOAT .)
    READ            reduce using rule 26 (Factor -> FLOAT .)
    WRITE           reduce using rule 26 (Factor -> FLOAT .)
    IF              reduce using rule 26 (Factor -> FLOAT .)
    ID              reduce using rule 26 (Factor -> FLOAT .)
    FOR             reduce using rule 26 (Factor -> FLOAT .)
    WHILE           reduce using rule 26 (Factor -> FLOAT .)
    REPEAT          reduce using rule 26 (Factor -> FLOAT .)
    $end            reduce using rule 26 (Factor -> FLOAT .)
    }               reduce using rule 26 (Factor -> FLOAT .)
    RET             reduce using rule 26 (Factor -> FLOAT .)
    ELSE            reduce using rule 26 (Factor -> FLOAT .)


state 49

    (28) Factor -> ID . ContinuacaoFactor
    (29) ContinuacaoFactor -> . [ INT ] ContContinuacaoFactor
    (30) ContinuacaoFactor -> .

    [               shift and go to state 86
    *               reduce using rule 30 (ContinuacaoFactor -> .)
    /               reduce using rule 30 (ContinuacaoFactor -> .)
    %               reduce using rule 30 (ContinuacaoFactor -> .)
    EQUAL           reduce using rule 30 (ContinuacaoFactor -> .)
    BIGGER          reduce using rule 30 (ContinuacaoFactor -> .)
    BIGGEREQUAL     reduce using rule 30 (ContinuacaoFactor -> .)
    SMALLER         reduce using rule 30 (ContinuacaoFactor -> .)
    SMALLEREQUAL    reduce using rule 30 (ContinuacaoFactor -> .)
    +               reduce using rule 30 (ContinuacaoFactor -> .)
    -               reduce using rule 30 (ContinuacaoFactor -> .)
    ;               reduce using rule 30 (ContinuacaoFactor -> .)
    DO              reduce using rule 30 (ContinuacaoFactor -> .)
    &               reduce using rule 30 (ContinuacaoFactor -> .)
    |               reduce using rule 30 (ContinuacaoFactor -> .)
    FUNC            reduce using rule 30 (ContinuacaoFactor -> .)
    READ            reduce using rule 30 (ContinuacaoFactor -> .)
    WRITE           reduce using rule 30 (ContinuacaoFactor -> .)
    IF              reduce using rule 30 (ContinuacaoFactor -> .)
    ID              reduce using rule 30 (ContinuacaoFactor -> .)
    FOR             reduce using rule 30 (ContinuacaoFactor -> .)
    WHILE           reduce using rule 30 (ContinuacaoFactor -> .)
    REPEAT          reduce using rule 30 (ContinuacaoFactor -> .)
    $end            reduce using rule 30 (ContinuacaoFactor -> .)
    }               reduce using rule 30 (ContinuacaoFactor -> .)
    RET             reduce using rule 30 (ContinuacaoFactor -> .)
    ELSE            reduce using rule 30 (ContinuacaoFactor -> .)

    ContinuacaoFactor              shift and go to state 85

state 50

    (33) Factor -> CALL . ID

    ID              shift and go to state 87


state 51

    (73) CicloWhile -> While ExprCond . Do { ListInstrucao }
    (60) ExprCond -> ExprCond . ContinuacaoExprCond
    (58) Do -> . DO
    (62) ContinuacaoExprCond -> . & Cond
    (63) ContinuacaoExprCond -> . | Cond

    DO              shift and go to state 67
    &               shift and go to state 68
    |               shift and go to state 69

    Do                             shift and go to state 88
    ContinuacaoExprCond            shift and go to state 66

state 52

    (75) CicloRepeat -> Repeat { . ListInstrucao } Until ExprCond
    (40) ListInstrucao -> . Instrucao ListInstrucao
    (41) ListInstrucao -> .
    (42) Instrucao -> . Atribuicao
    (43) Instrucao -> . Leitura
    (44) Instrucao -> . Escrita
    (45) Instrucao -> . Condicao
    (46) Instrucao -> . Ciclo
    (47) Atribuicao -> . Var = Expr ;
    (53) Leitura -> . READ Var ;
    (54) Escrita -> . WRITE Var ;
    (55) Condicao -> . IF ExprCond Do ListInstrucao ContinuacaoIf
    (70) Ciclo -> . CicloWhile
    (71) Ciclo -> . CicloRepeat
    (72) Ciclo -> . CicloFor
    (48) Var -> . ID ContinuacaoVar
    (73) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (75) CicloRepeat -> . Repeat { ListInstrucao } Until ExprCond
    (78) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (74) While -> . WHILE
    (76) Repeat -> . REPEAT

    }               reduce using rule 41 (ListInstrucao -> .)
    READ            shift and go to state 17
    WRITE           shift and go to state 18
    IF              shift and go to state 19
    ID              shift and go to state 15
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    REPEAT          shift and go to state 27

    Repeat                         shift and go to state 24
    ListInstrucao                  shift and go to state 89
    Instrucao                      shift and go to state 90
    Atribuicao                     shift and go to state 9
    Leitura                        shift and go to state 10
    Escrita                        shift and go to state 11
    Condicao                       shift and go to state 12
    Ciclo                          shift and go to state 13
    Var                            shift and go to state 16
    CicloWhile                     shift and go to state 20
    CicloRepeat                    shift and go to state 21
    CicloFor                       shift and go to state 22
    While                          shift and go to state 23

state 53

    (78) CicloFor -> FOR ( . AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (79) AtribuicaoInicial -> . Atribuicao
    (47) Atribuicao -> . Var = Expr ;
    (48) Var -> . ID ContinuacaoVar

    ID              shift and go to state 15

    AtribuicaoInicial              shift and go to state 91
    Atribuicao                     shift and go to state 92
    Var                            shift and go to state 16

state 54

    (3) Variaveis -> { Declaracoes } .

    FUNC            reduce using rule 3 (Variaveis -> { Declaracoes } .)
    READ            reduce using rule 3 (Variaveis -> { Declaracoes } .)
    WRITE           reduce using rule 3 (Variaveis -> { Declaracoes } .)
    IF              reduce using rule 3 (Variaveis -> { Declaracoes } .)
    ID              reduce using rule 3 (Variaveis -> { Declaracoes } .)
    FOR             reduce using rule 3 (Variaveis -> { Declaracoes } .)
    WHILE           reduce using rule 3 (Variaveis -> { Declaracoes } .)
    REPEAT          reduce using rule 3 (Variaveis -> { Declaracoes } .)
    $end            reduce using rule 3 (Variaveis -> { Declaracoes } .)
    RET             reduce using rule 3 (Variaveis -> { Declaracoes } .)


state 55

    (4) Declaracoes -> Declaracao Declaracoes .

    }               reduce using rule 4 (Declaracoes -> Declaracao Declaracoes .)


state 56

    (6) Declaracao -> Type ContinuacaoDeclaracao .

    ID              reduce using rule 6 (Declaracao -> Type ContinuacaoDeclaracao .)
    }               reduce using rule 6 (Declaracao -> Type ContinuacaoDeclaracao .)


state 57

    (8) ContinuacaoDeclaracao -> ID . ContContinuacaoDeclaracao
    (10) ContContinuacaoDeclaracao -> . = Expr ;
    (11) ContContinuacaoDeclaracao -> . ;

    =               shift and go to state 94
    ;               shift and go to state 95

    ContContinuacaoDeclaracao      shift and go to state 93

state 58

    (9) ContinuacaoDeclaracao -> Array . ID ;

    ID              shift and go to state 96


state 59

    (12) Array -> [ . INT ] ContArray

    INT             shift and go to state 97


state 60

    (37) Funcao -> DecFunc { Variaveis . ListInstrucao Ret }
    (40) ListInstrucao -> . Instrucao ListInstrucao
    (41) ListInstrucao -> .
    (42) Instrucao -> . Atribuicao
    (43) Instrucao -> . Leitura
    (44) Instrucao -> . Escrita
    (45) Instrucao -> . Condicao
    (46) Instrucao -> . Ciclo
    (47) Atribuicao -> . Var = Expr ;
    (53) Leitura -> . READ Var ;
    (54) Escrita -> . WRITE Var ;
    (55) Condicao -> . IF ExprCond Do ListInstrucao ContinuacaoIf
    (70) Ciclo -> . CicloWhile
    (71) Ciclo -> . CicloRepeat
    (72) Ciclo -> . CicloFor
    (48) Var -> . ID ContinuacaoVar
    (73) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (75) CicloRepeat -> . Repeat { ListInstrucao } Until ExprCond
    (78) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (74) While -> . WHILE
    (76) Repeat -> . REPEAT

    RET             reduce using rule 41 (ListInstrucao -> .)
    READ            shift and go to state 17
    WRITE           shift and go to state 18
    IF              shift and go to state 19
    ID              shift and go to state 15
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    REPEAT          shift and go to state 27

    ListInstrucao                  shift and go to state 98
    Instrucao                      shift and go to state 90
    Atribuicao                     shift and go to state 9
    Leitura                        shift and go to state 10
    Escrita                        shift and go to state 11
    Condicao                       shift and go to state 12
    Ciclo                          shift and go to state 13
    Var                            shift and go to state 16
    CicloWhile                     shift and go to state 20
    CicloRepeat                    shift and go to state 21
    CicloFor                       shift and go to state 22
    While                          shift and go to state 23
    Repeat                         shift and go to state 24

state 61

    (49) ContinuacaoVar -> [ INT . ] ContContinuacaoVar

    ]               shift and go to state 99


state 62

    (47) Atribuicao -> Var = Expr . ;
    (15) Expr -> Expr . ContinuacaoExpr
    (17) ContinuacaoExpr -> . + Term
    (18) ContinuacaoExpr -> . - Term

    ;               shift and go to state 100
    +               shift and go to state 77
    -               shift and go to state 78

    ContinuacaoExpr                shift and go to state 71

state 63

    (53) Leitura -> READ Var ; .

    FUNC            reduce using rule 53 (Leitura -> READ Var ; .)
    READ            reduce using rule 53 (Leitura -> READ Var ; .)
    WRITE           reduce using rule 53 (Leitura -> READ Var ; .)
    IF              reduce using rule 53 (Leitura -> READ Var ; .)
    ID              reduce using rule 53 (Leitura -> READ Var ; .)
    FOR             reduce using rule 53 (Leitura -> READ Var ; .)
    WHILE           reduce using rule 53 (Leitura -> READ Var ; .)
    REPEAT          reduce using rule 53 (Leitura -> READ Var ; .)
    $end            reduce using rule 53 (Leitura -> READ Var ; .)
    }               reduce using rule 53 (Leitura -> READ Var ; .)
    RET             reduce using rule 53 (Leitura -> READ Var ; .)
    ;               reduce using rule 53 (Leitura -> READ Var ; .)
    ELSE            reduce using rule 53 (Leitura -> READ Var ; .)


state 64

    (54) Escrita -> WRITE Var ; .

    FUNC            reduce using rule 54 (Escrita -> WRITE Var ; .)
    READ            reduce using rule 54 (Escrita -> WRITE Var ; .)
    WRITE           reduce using rule 54 (Escrita -> WRITE Var ; .)
    IF              reduce using rule 54 (Escrita -> WRITE Var ; .)
    ID              reduce using rule 54 (Escrita -> WRITE Var ; .)
    FOR             reduce using rule 54 (Escrita -> WRITE Var ; .)
    WHILE           reduce using rule 54 (Escrita -> WRITE Var ; .)
    REPEAT          reduce using rule 54 (Escrita -> WRITE Var ; .)
    $end            reduce using rule 54 (Escrita -> WRITE Var ; .)
    }               reduce using rule 54 (Escrita -> WRITE Var ; .)
    RET             reduce using rule 54 (Escrita -> WRITE Var ; .)
    ;               reduce using rule 54 (Escrita -> WRITE Var ; .)
    ELSE            reduce using rule 54 (Escrita -> WRITE Var ; .)


state 65

    (55) Condicao -> IF ExprCond Do . ListInstrucao ContinuacaoIf
    (40) ListInstrucao -> . Instrucao ListInstrucao
    (41) ListInstrucao -> .
    (42) Instrucao -> . Atribuicao
    (43) Instrucao -> . Leitura
    (44) Instrucao -> . Escrita
    (45) Instrucao -> . Condicao
    (46) Instrucao -> . Ciclo
    (47) Atribuicao -> . Var = Expr ;
    (53) Leitura -> . READ Var ;
    (54) Escrita -> . WRITE Var ;
    (55) Condicao -> . IF ExprCond Do ListInstrucao ContinuacaoIf
    (70) Ciclo -> . CicloWhile
    (71) Ciclo -> . CicloRepeat
    (72) Ciclo -> . CicloFor
    (48) Var -> . ID ContinuacaoVar
    (73) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (75) CicloRepeat -> . Repeat { ListInstrucao } Until ExprCond
    (78) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (74) While -> . WHILE
    (76) Repeat -> . REPEAT

    ;               reduce using rule 41 (ListInstrucao -> .)
    ELSE            reduce using rule 41 (ListInstrucao -> .)
    READ            shift and go to state 17
    WRITE           shift and go to state 18
    IF              shift and go to state 19
    ID              shift and go to state 15
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    REPEAT          shift and go to state 27

    ListInstrucao                  shift and go to state 101
    Instrucao                      shift and go to state 90
    Atribuicao                     shift and go to state 9
    Leitura                        shift and go to state 10
    Escrita                        shift and go to state 11
    Condicao                       shift and go to state 12
    Ciclo                          shift and go to state 13
    Var                            shift and go to state 16
    CicloWhile                     shift and go to state 20
    CicloRepeat                    shift and go to state 21
    CicloFor                       shift and go to state 22
    While                          shift and go to state 23
    Repeat                         shift and go to state 24

state 66

    (60) ExprCond -> ExprCond ContinuacaoExprCond .

    DO              reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    &               reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    |               reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    ;               reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    FUNC            reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    READ            reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    WRITE           reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    IF              reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    ID              reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    FOR             reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    WHILE           reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    REPEAT          reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    $end            reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    }               reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    RET             reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)
    ELSE            reduce using rule 60 (ExprCond -> ExprCond ContinuacaoExprCond .)


state 67

    (58) Do -> DO .

    READ            reduce using rule 58 (Do -> DO .)
    WRITE           reduce using rule 58 (Do -> DO .)
    IF              reduce using rule 58 (Do -> DO .)
    ID              reduce using rule 58 (Do -> DO .)
    FOR             reduce using rule 58 (Do -> DO .)
    WHILE           reduce using rule 58 (Do -> DO .)
    REPEAT          reduce using rule 58 (Do -> DO .)
    ;               reduce using rule 58 (Do -> DO .)
    ELSE            reduce using rule 58 (Do -> DO .)
    {               reduce using rule 58 (Do -> DO .)


state 68

    (62) ContinuacaoExprCond -> & . Cond
    (64) Cond -> . Expr ContinuacaoCond
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Cond                           shift and go to state 102
    Expr                           shift and go to state 43
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 69

    (63) ContinuacaoExprCond -> | . Cond
    (64) Cond -> . Expr ContinuacaoCond
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Cond                           shift and go to state 103
    Expr                           shift and go to state 43
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 70

    (64) Cond -> Expr ContinuacaoCond .

    DO              reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    &               reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    |               reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    ;               reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    FUNC            reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    READ            reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    WRITE           reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    IF              reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    ID              reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    FOR             reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    WHILE           reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    REPEAT          reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    $end            reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    }               reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    RET             reduce using rule 64 (Cond -> Expr ContinuacaoCond .)
    ELSE            reduce using rule 64 (Cond -> Expr ContinuacaoCond .)


state 71

    (15) Expr -> Expr ContinuacaoExpr .

    EQUAL           reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    BIGGER          reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    BIGGEREQUAL     reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    SMALLER         reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    SMALLEREQUAL    reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    +               reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    -               reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    ;               reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    DO              reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    &               reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    |               reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    FUNC            reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    READ            reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    WRITE           reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    IF              reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    ID              reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    FOR             reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    WHILE           reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    REPEAT          reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    $end            reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    }               reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    RET             reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)
    ELSE            reduce using rule 15 (Expr -> Expr ContinuacaoExpr .)


state 72

    (65) ContinuacaoCond -> EQUAL . Expr
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Expr                           shift and go to state 104
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 73

    (66) ContinuacaoCond -> BIGGER . Expr
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Expr                           shift and go to state 105
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 74

    (67) ContinuacaoCond -> BIGGEREQUAL . Expr
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Expr                           shift and go to state 106
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 75

    (68) ContinuacaoCond -> SMALLER . Expr
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Expr                           shift and go to state 107
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 76

    (69) ContinuacaoCond -> SMALLEREQUAL . Expr
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Expr                           shift and go to state 108
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 77

    (17) ContinuacaoExpr -> + . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Term                           shift and go to state 109
    Factor                         shift and go to state 45

state 78

    (18) ContinuacaoExpr -> - . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Term                           shift and go to state 110
    Factor                         shift and go to state 45

state 79

    (19) Term -> Term ContinuacaoTerm .

    *               reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    /               reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    %               reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    EQUAL           reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    BIGGER          reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    BIGGEREQUAL     reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    SMALLER         reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    SMALLEREQUAL    reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    +               reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    -               reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    ;               reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    DO              reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    &               reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    |               reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    FUNC            reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    READ            reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    WRITE           reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    IF              reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    ID              reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    FOR             reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    WHILE           reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    REPEAT          reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    $end            reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    }               reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    RET             reduce using rule 19 (Term -> Term ContinuacaoTerm .)
    ELSE            reduce using rule 19 (Term -> Term ContinuacaoTerm .)


state 80

    (21) ContinuacaoTerm -> * . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Factor                         shift and go to state 111

state 81

    (22) ContinuacaoTerm -> / . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Factor                         shift and go to state 112

state 82

    (23) ContinuacaoTerm -> % . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Factor                         shift and go to state 113

state 83

    (25) Factor -> - INT .

    *               reduce using rule 25 (Factor -> - INT .)
    /               reduce using rule 25 (Factor -> - INT .)
    %               reduce using rule 25 (Factor -> - INT .)
    EQUAL           reduce using rule 25 (Factor -> - INT .)
    BIGGER          reduce using rule 25 (Factor -> - INT .)
    BIGGEREQUAL     reduce using rule 25 (Factor -> - INT .)
    SMALLER         reduce using rule 25 (Factor -> - INT .)
    SMALLEREQUAL    reduce using rule 25 (Factor -> - INT .)
    +               reduce using rule 25 (Factor -> - INT .)
    -               reduce using rule 25 (Factor -> - INT .)
    ;               reduce using rule 25 (Factor -> - INT .)
    DO              reduce using rule 25 (Factor -> - INT .)
    &               reduce using rule 25 (Factor -> - INT .)
    |               reduce using rule 25 (Factor -> - INT .)
    FUNC            reduce using rule 25 (Factor -> - INT .)
    READ            reduce using rule 25 (Factor -> - INT .)
    WRITE           reduce using rule 25 (Factor -> - INT .)
    IF              reduce using rule 25 (Factor -> - INT .)
    ID              reduce using rule 25 (Factor -> - INT .)
    FOR             reduce using rule 25 (Factor -> - INT .)
    WHILE           reduce using rule 25 (Factor -> - INT .)
    REPEAT          reduce using rule 25 (Factor -> - INT .)
    $end            reduce using rule 25 (Factor -> - INT .)
    }               reduce using rule 25 (Factor -> - INT .)
    RET             reduce using rule 25 (Factor -> - INT .)
    ELSE            reduce using rule 25 (Factor -> - INT .)


state 84

    (27) Factor -> - FLOAT .

    *               reduce using rule 27 (Factor -> - FLOAT .)
    /               reduce using rule 27 (Factor -> - FLOAT .)
    %               reduce using rule 27 (Factor -> - FLOAT .)
    EQUAL           reduce using rule 27 (Factor -> - FLOAT .)
    BIGGER          reduce using rule 27 (Factor -> - FLOAT .)
    BIGGEREQUAL     reduce using rule 27 (Factor -> - FLOAT .)
    SMALLER         reduce using rule 27 (Factor -> - FLOAT .)
    SMALLEREQUAL    reduce using rule 27 (Factor -> - FLOAT .)
    +               reduce using rule 27 (Factor -> - FLOAT .)
    -               reduce using rule 27 (Factor -> - FLOAT .)
    ;               reduce using rule 27 (Factor -> - FLOAT .)
    DO              reduce using rule 27 (Factor -> - FLOAT .)
    &               reduce using rule 27 (Factor -> - FLOAT .)
    |               reduce using rule 27 (Factor -> - FLOAT .)
    FUNC            reduce using rule 27 (Factor -> - FLOAT .)
    READ            reduce using rule 27 (Factor -> - FLOAT .)
    WRITE           reduce using rule 27 (Factor -> - FLOAT .)
    IF              reduce using rule 27 (Factor -> - FLOAT .)
    ID              reduce using rule 27 (Factor -> - FLOAT .)
    FOR             reduce using rule 27 (Factor -> - FLOAT .)
    WHILE           reduce using rule 27 (Factor -> - FLOAT .)
    REPEAT          reduce using rule 27 (Factor -> - FLOAT .)
    $end            reduce using rule 27 (Factor -> - FLOAT .)
    }               reduce using rule 27 (Factor -> - FLOAT .)
    RET             reduce using rule 27 (Factor -> - FLOAT .)
    ELSE            reduce using rule 27 (Factor -> - FLOAT .)


state 85

    (28) Factor -> ID ContinuacaoFactor .

    *               reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    /               reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    %               reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    EQUAL           reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    BIGGER          reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    BIGGEREQUAL     reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    SMALLER         reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    SMALLEREQUAL    reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    +               reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    -               reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    ;               reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    DO              reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    &               reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    |               reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    FUNC            reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    READ            reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    WRITE           reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    IF              reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    ID              reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    FOR             reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    WHILE           reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    REPEAT          reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    $end            reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    }               reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    RET             reduce using rule 28 (Factor -> ID ContinuacaoFactor .)
    ELSE            reduce using rule 28 (Factor -> ID ContinuacaoFactor .)


state 86

    (29) ContinuacaoFactor -> [ . INT ] ContContinuacaoFactor

    INT             shift and go to state 114


state 87

    (33) Factor -> CALL ID .

    *               reduce using rule 33 (Factor -> CALL ID .)
    /               reduce using rule 33 (Factor -> CALL ID .)
    %               reduce using rule 33 (Factor -> CALL ID .)
    EQUAL           reduce using rule 33 (Factor -> CALL ID .)
    BIGGER          reduce using rule 33 (Factor -> CALL ID .)
    BIGGEREQUAL     reduce using rule 33 (Factor -> CALL ID .)
    SMALLER         reduce using rule 33 (Factor -> CALL ID .)
    SMALLEREQUAL    reduce using rule 33 (Factor -> CALL ID .)
    +               reduce using rule 33 (Factor -> CALL ID .)
    -               reduce using rule 33 (Factor -> CALL ID .)
    ;               reduce using rule 33 (Factor -> CALL ID .)
    DO              reduce using rule 33 (Factor -> CALL ID .)
    &               reduce using rule 33 (Factor -> CALL ID .)
    |               reduce using rule 33 (Factor -> CALL ID .)
    FUNC            reduce using rule 33 (Factor -> CALL ID .)
    READ            reduce using rule 33 (Factor -> CALL ID .)
    WRITE           reduce using rule 33 (Factor -> CALL ID .)
    IF              reduce using rule 33 (Factor -> CALL ID .)
    ID              reduce using rule 33 (Factor -> CALL ID .)
    FOR             reduce using rule 33 (Factor -> CALL ID .)
    WHILE           reduce using rule 33 (Factor -> CALL ID .)
    REPEAT          reduce using rule 33 (Factor -> CALL ID .)
    $end            reduce using rule 33 (Factor -> CALL ID .)
    }               reduce using rule 33 (Factor -> CALL ID .)
    RET             reduce using rule 33 (Factor -> CALL ID .)
    ELSE            reduce using rule 33 (Factor -> CALL ID .)


state 88

    (73) CicloWhile -> While ExprCond Do . { ListInstrucao }

    {               shift and go to state 115


state 89

    (75) CicloRepeat -> Repeat { ListInstrucao . } Until ExprCond

    }               shift and go to state 116


state 90

    (40) ListInstrucao -> Instrucao . ListInstrucao
    (40) ListInstrucao -> . Instrucao ListInstrucao
    (41) ListInstrucao -> .
    (42) Instrucao -> . Atribuicao
    (43) Instrucao -> . Leitura
    (44) Instrucao -> . Escrita
    (45) Instrucao -> . Condicao
    (46) Instrucao -> . Ciclo
    (47) Atribuicao -> . Var = Expr ;
    (53) Leitura -> . READ Var ;
    (54) Escrita -> . WRITE Var ;
    (55) Condicao -> . IF ExprCond Do ListInstrucao ContinuacaoIf
    (70) Ciclo -> . CicloWhile
    (71) Ciclo -> . CicloRepeat
    (72) Ciclo -> . CicloFor
    (48) Var -> . ID ContinuacaoVar
    (73) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (75) CicloRepeat -> . Repeat { ListInstrucao } Until ExprCond
    (78) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (74) While -> . WHILE
    (76) Repeat -> . REPEAT

    }               reduce using rule 41 (ListInstrucao -> .)
    RET             reduce using rule 41 (ListInstrucao -> .)
    ;               reduce using rule 41 (ListInstrucao -> .)
    ELSE            reduce using rule 41 (ListInstrucao -> .)
    READ            shift and go to state 17
    WRITE           shift and go to state 18
    IF              shift and go to state 19
    ID              shift and go to state 15
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    REPEAT          shift and go to state 27

    Instrucao                      shift and go to state 90
    ListInstrucao                  shift and go to state 117
    Atribuicao                     shift and go to state 9
    Leitura                        shift and go to state 10
    Escrita                        shift and go to state 11
    Condicao                       shift and go to state 12
    Ciclo                          shift and go to state 13
    Var                            shift and go to state 16
    CicloWhile                     shift and go to state 20
    CicloRepeat                    shift and go to state 21
    CicloFor                       shift and go to state 22
    While                          shift and go to state 23
    Repeat                         shift and go to state 24

state 91

    (78) CicloFor -> FOR ( AtribuicaoInicial . ExprCond EndCond Atribuicao ) { ListInstrucao }
    (60) ExprCond -> . ExprCond ContinuacaoExprCond
    (61) ExprCond -> . Cond
    (64) Cond -> . Expr ContinuacaoCond
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    ExprCond                       shift and go to state 118
    Cond                           shift and go to state 42
    Expr                           shift and go to state 43
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 92

    (79) AtribuicaoInicial -> Atribuicao .

    INT             reduce using rule 79 (AtribuicaoInicial -> Atribuicao .)
    -               reduce using rule 79 (AtribuicaoInicial -> Atribuicao .)
    FLOAT           reduce using rule 79 (AtribuicaoInicial -> Atribuicao .)
    ID              reduce using rule 79 (AtribuicaoInicial -> Atribuicao .)
    CALL            reduce using rule 79 (AtribuicaoInicial -> Atribuicao .)


state 93

    (8) ContinuacaoDeclaracao -> ID ContContinuacaoDeclaracao .

    ID              reduce using rule 8 (ContinuacaoDeclaracao -> ID ContContinuacaoDeclaracao .)
    }               reduce using rule 8 (ContinuacaoDeclaracao -> ID ContContinuacaoDeclaracao .)


state 94

    (10) ContContinuacaoDeclaracao -> = . Expr ;
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Expr                           shift and go to state 119
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 95

    (11) ContContinuacaoDeclaracao -> ; .

    ID              reduce using rule 11 (ContContinuacaoDeclaracao -> ; .)
    }               reduce using rule 11 (ContContinuacaoDeclaracao -> ; .)


state 96

    (9) ContinuacaoDeclaracao -> Array ID . ;

    ;               shift and go to state 120


state 97

    (12) Array -> [ INT . ] ContArray

    ]               shift and go to state 121


state 98

    (37) Funcao -> DecFunc { Variaveis ListInstrucao . Ret }
    (39) Ret -> . RET Expr ;

    RET             shift and go to state 123

    Ret                            shift and go to state 122

state 99

    (49) ContinuacaoVar -> [ INT ] . ContContinuacaoVar
    (51) ContContinuacaoVar -> . [ INT ]
    (52) ContContinuacaoVar -> .

    [               shift and go to state 124
    =               reduce using rule 52 (ContContinuacaoVar -> .)
    ;               reduce using rule 52 (ContContinuacaoVar -> .)

    ContContinuacaoVar             shift and go to state 125

state 100

    (47) Atribuicao -> Var = Expr ; .

    FUNC            reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    READ            reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    WRITE           reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    IF              reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    ID              reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    FOR             reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    WHILE           reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    REPEAT          reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    $end            reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    }               reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    INT             reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    -               reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    FLOAT           reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    CALL            reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    RET             reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    ;               reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    ELSE            reduce using rule 47 (Atribuicao -> Var = Expr ; .)
    )               reduce using rule 47 (Atribuicao -> Var = Expr ; .)


state 101

    (55) Condicao -> IF ExprCond Do ListInstrucao . ContinuacaoIf
    (56) ContinuacaoIf -> . Else ListInstrucao ;
    (57) ContinuacaoIf -> . ;
    (59) Else -> . ELSE

    ;               shift and go to state 128
    ELSE            shift and go to state 129

    ContinuacaoIf                  shift and go to state 126
    Else                           shift and go to state 127

state 102

    (62) ContinuacaoExprCond -> & Cond .

    DO              reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    &               reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    |               reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    ;               reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    FUNC            reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    READ            reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    WRITE           reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    IF              reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    ID              reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    FOR             reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    WHILE           reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    REPEAT          reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    $end            reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    }               reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    RET             reduce using rule 62 (ContinuacaoExprCond -> & Cond .)
    ELSE            reduce using rule 62 (ContinuacaoExprCond -> & Cond .)


state 103

    (63) ContinuacaoExprCond -> | Cond .

    DO              reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    &               reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    |               reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    ;               reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    FUNC            reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    READ            reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    WRITE           reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    IF              reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    ID              reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    FOR             reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    WHILE           reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    REPEAT          reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    $end            reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    }               reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    RET             reduce using rule 63 (ContinuacaoExprCond -> | Cond .)
    ELSE            reduce using rule 63 (ContinuacaoExprCond -> | Cond .)


state 104

    (65) ContinuacaoCond -> EQUAL Expr .
    (15) Expr -> Expr . ContinuacaoExpr
    (17) ContinuacaoExpr -> . + Term
    (18) ContinuacaoExpr -> . - Term

    DO              reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    &               reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    |               reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    ;               reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    FUNC            reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    READ            reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    WRITE           reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    IF              reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    ID              reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    FOR             reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    WHILE           reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    REPEAT          reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    $end            reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    }               reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    RET             reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    ELSE            reduce using rule 65 (ContinuacaoCond -> EQUAL Expr .)
    +               shift and go to state 77
    -               shift and go to state 78

    ContinuacaoExpr                shift and go to state 71

state 105

    (66) ContinuacaoCond -> BIGGER Expr .
    (15) Expr -> Expr . ContinuacaoExpr
    (17) ContinuacaoExpr -> . + Term
    (18) ContinuacaoExpr -> . - Term

    DO              reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    &               reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    |               reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    ;               reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    FUNC            reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    READ            reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    WRITE           reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    IF              reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    ID              reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    FOR             reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    WHILE           reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    REPEAT          reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    $end            reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    }               reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    RET             reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    ELSE            reduce using rule 66 (ContinuacaoCond -> BIGGER Expr .)
    +               shift and go to state 77
    -               shift and go to state 78

    ContinuacaoExpr                shift and go to state 71

state 106

    (67) ContinuacaoCond -> BIGGEREQUAL Expr .
    (15) Expr -> Expr . ContinuacaoExpr
    (17) ContinuacaoExpr -> . + Term
    (18) ContinuacaoExpr -> . - Term

    DO              reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    &               reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    |               reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    ;               reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    FUNC            reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    READ            reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    WRITE           reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    IF              reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    ID              reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    FOR             reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    WHILE           reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    REPEAT          reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    $end            reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    }               reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    RET             reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    ELSE            reduce using rule 67 (ContinuacaoCond -> BIGGEREQUAL Expr .)
    +               shift and go to state 77
    -               shift and go to state 78

    ContinuacaoExpr                shift and go to state 71

state 107

    (68) ContinuacaoCond -> SMALLER Expr .
    (15) Expr -> Expr . ContinuacaoExpr
    (17) ContinuacaoExpr -> . + Term
    (18) ContinuacaoExpr -> . - Term

    DO              reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    &               reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    |               reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    ;               reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    FUNC            reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    READ            reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    WRITE           reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    IF              reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    ID              reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    FOR             reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    WHILE           reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    REPEAT          reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    $end            reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    }               reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    RET             reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    ELSE            reduce using rule 68 (ContinuacaoCond -> SMALLER Expr .)
    +               shift and go to state 77
    -               shift and go to state 78

    ContinuacaoExpr                shift and go to state 71

state 108

    (69) ContinuacaoCond -> SMALLEREQUAL Expr .
    (15) Expr -> Expr . ContinuacaoExpr
    (17) ContinuacaoExpr -> . + Term
    (18) ContinuacaoExpr -> . - Term

    DO              reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    &               reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    |               reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    ;               reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    FUNC            reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    READ            reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    WRITE           reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    IF              reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    ID              reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    FOR             reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    WHILE           reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    REPEAT          reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    $end            reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    }               reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    RET             reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    ELSE            reduce using rule 69 (ContinuacaoCond -> SMALLEREQUAL Expr .)
    +               shift and go to state 77
    -               shift and go to state 78

    ContinuacaoExpr                shift and go to state 71

state 109

    (17) ContinuacaoExpr -> + Term .
    (19) Term -> Term . ContinuacaoTerm
    (21) ContinuacaoTerm -> . * Factor
    (22) ContinuacaoTerm -> . / Factor
    (23) ContinuacaoTerm -> . % Factor

    EQUAL           reduce using rule 17 (ContinuacaoExpr -> + Term .)
    BIGGER          reduce using rule 17 (ContinuacaoExpr -> + Term .)
    BIGGEREQUAL     reduce using rule 17 (ContinuacaoExpr -> + Term .)
    SMALLER         reduce using rule 17 (ContinuacaoExpr -> + Term .)
    SMALLEREQUAL    reduce using rule 17 (ContinuacaoExpr -> + Term .)
    +               reduce using rule 17 (ContinuacaoExpr -> + Term .)
    -               reduce using rule 17 (ContinuacaoExpr -> + Term .)
    ;               reduce using rule 17 (ContinuacaoExpr -> + Term .)
    DO              reduce using rule 17 (ContinuacaoExpr -> + Term .)
    &               reduce using rule 17 (ContinuacaoExpr -> + Term .)
    |               reduce using rule 17 (ContinuacaoExpr -> + Term .)
    FUNC            reduce using rule 17 (ContinuacaoExpr -> + Term .)
    READ            reduce using rule 17 (ContinuacaoExpr -> + Term .)
    WRITE           reduce using rule 17 (ContinuacaoExpr -> + Term .)
    IF              reduce using rule 17 (ContinuacaoExpr -> + Term .)
    ID              reduce using rule 17 (ContinuacaoExpr -> + Term .)
    FOR             reduce using rule 17 (ContinuacaoExpr -> + Term .)
    WHILE           reduce using rule 17 (ContinuacaoExpr -> + Term .)
    REPEAT          reduce using rule 17 (ContinuacaoExpr -> + Term .)
    $end            reduce using rule 17 (ContinuacaoExpr -> + Term .)
    }               reduce using rule 17 (ContinuacaoExpr -> + Term .)
    RET             reduce using rule 17 (ContinuacaoExpr -> + Term .)
    ELSE            reduce using rule 17 (ContinuacaoExpr -> + Term .)
    *               shift and go to state 80
    /               shift and go to state 81
    %               shift and go to state 82

    ContinuacaoTerm                shift and go to state 79

state 110

    (18) ContinuacaoExpr -> - Term .
    (19) Term -> Term . ContinuacaoTerm
    (21) ContinuacaoTerm -> . * Factor
    (22) ContinuacaoTerm -> . / Factor
    (23) ContinuacaoTerm -> . % Factor

    EQUAL           reduce using rule 18 (ContinuacaoExpr -> - Term .)
    BIGGER          reduce using rule 18 (ContinuacaoExpr -> - Term .)
    BIGGEREQUAL     reduce using rule 18 (ContinuacaoExpr -> - Term .)
    SMALLER         reduce using rule 18 (ContinuacaoExpr -> - Term .)
    SMALLEREQUAL    reduce using rule 18 (ContinuacaoExpr -> - Term .)
    +               reduce using rule 18 (ContinuacaoExpr -> - Term .)
    -               reduce using rule 18 (ContinuacaoExpr -> - Term .)
    ;               reduce using rule 18 (ContinuacaoExpr -> - Term .)
    DO              reduce using rule 18 (ContinuacaoExpr -> - Term .)
    &               reduce using rule 18 (ContinuacaoExpr -> - Term .)
    |               reduce using rule 18 (ContinuacaoExpr -> - Term .)
    FUNC            reduce using rule 18 (ContinuacaoExpr -> - Term .)
    READ            reduce using rule 18 (ContinuacaoExpr -> - Term .)
    WRITE           reduce using rule 18 (ContinuacaoExpr -> - Term .)
    IF              reduce using rule 18 (ContinuacaoExpr -> - Term .)
    ID              reduce using rule 18 (ContinuacaoExpr -> - Term .)
    FOR             reduce using rule 18 (ContinuacaoExpr -> - Term .)
    WHILE           reduce using rule 18 (ContinuacaoExpr -> - Term .)
    REPEAT          reduce using rule 18 (ContinuacaoExpr -> - Term .)
    $end            reduce using rule 18 (ContinuacaoExpr -> - Term .)
    }               reduce using rule 18 (ContinuacaoExpr -> - Term .)
    RET             reduce using rule 18 (ContinuacaoExpr -> - Term .)
    ELSE            reduce using rule 18 (ContinuacaoExpr -> - Term .)
    *               shift and go to state 80
    /               shift and go to state 81
    %               shift and go to state 82

    ContinuacaoTerm                shift and go to state 79

state 111

    (21) ContinuacaoTerm -> * Factor .

    *               reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    /               reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    %               reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    EQUAL           reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    BIGGER          reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    BIGGEREQUAL     reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    SMALLER         reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    SMALLEREQUAL    reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    +               reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    -               reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    ;               reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    DO              reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    &               reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    |               reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    FUNC            reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    READ            reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    WRITE           reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    IF              reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    ID              reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    FOR             reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    WHILE           reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    REPEAT          reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    $end            reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    }               reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    RET             reduce using rule 21 (ContinuacaoTerm -> * Factor .)
    ELSE            reduce using rule 21 (ContinuacaoTerm -> * Factor .)


state 112

    (22) ContinuacaoTerm -> / Factor .

    *               reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    /               reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    %               reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    EQUAL           reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    BIGGER          reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    BIGGEREQUAL     reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    SMALLER         reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    SMALLEREQUAL    reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    +               reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    -               reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    ;               reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    DO              reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    &               reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    |               reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    FUNC            reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    READ            reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    WRITE           reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    IF              reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    ID              reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    FOR             reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    WHILE           reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    REPEAT          reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    $end            reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    }               reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    RET             reduce using rule 22 (ContinuacaoTerm -> / Factor .)
    ELSE            reduce using rule 22 (ContinuacaoTerm -> / Factor .)


state 113

    (23) ContinuacaoTerm -> % Factor .

    *               reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    /               reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    %               reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    EQUAL           reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    BIGGER          reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    BIGGEREQUAL     reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    SMALLER         reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    SMALLEREQUAL    reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    +               reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    -               reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    ;               reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    DO              reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    &               reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    |               reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    FUNC            reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    READ            reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    WRITE           reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    IF              reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    ID              reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    FOR             reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    WHILE           reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    REPEAT          reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    $end            reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    }               reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    RET             reduce using rule 23 (ContinuacaoTerm -> % Factor .)
    ELSE            reduce using rule 23 (ContinuacaoTerm -> % Factor .)


state 114

    (29) ContinuacaoFactor -> [ INT . ] ContContinuacaoFactor

    ]               shift and go to state 130


state 115

    (73) CicloWhile -> While ExprCond Do { . ListInstrucao }
    (40) ListInstrucao -> . Instrucao ListInstrucao
    (41) ListInstrucao -> .
    (42) Instrucao -> . Atribuicao
    (43) Instrucao -> . Leitura
    (44) Instrucao -> . Escrita
    (45) Instrucao -> . Condicao
    (46) Instrucao -> . Ciclo
    (47) Atribuicao -> . Var = Expr ;
    (53) Leitura -> . READ Var ;
    (54) Escrita -> . WRITE Var ;
    (55) Condicao -> . IF ExprCond Do ListInstrucao ContinuacaoIf
    (70) Ciclo -> . CicloWhile
    (71) Ciclo -> . CicloRepeat
    (72) Ciclo -> . CicloFor
    (48) Var -> . ID ContinuacaoVar
    (73) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (75) CicloRepeat -> . Repeat { ListInstrucao } Until ExprCond
    (78) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (74) While -> . WHILE
    (76) Repeat -> . REPEAT

    }               reduce using rule 41 (ListInstrucao -> .)
    READ            shift and go to state 17
    WRITE           shift and go to state 18
    IF              shift and go to state 19
    ID              shift and go to state 15
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    REPEAT          shift and go to state 27

    While                          shift and go to state 23
    ListInstrucao                  shift and go to state 131
    Instrucao                      shift and go to state 90
    Atribuicao                     shift and go to state 9
    Leitura                        shift and go to state 10
    Escrita                        shift and go to state 11
    Condicao                       shift and go to state 12
    Ciclo                          shift and go to state 13
    Var                            shift and go to state 16
    CicloWhile                     shift and go to state 20
    CicloRepeat                    shift and go to state 21
    CicloFor                       shift and go to state 22
    Repeat                         shift and go to state 24

state 116

    (75) CicloRepeat -> Repeat { ListInstrucao } . Until ExprCond
    (77) Until -> . UNTIL

    UNTIL           shift and go to state 133

    Until                          shift and go to state 132

state 117

    (40) ListInstrucao -> Instrucao ListInstrucao .

    }               reduce using rule 40 (ListInstrucao -> Instrucao ListInstrucao .)
    RET             reduce using rule 40 (ListInstrucao -> Instrucao ListInstrucao .)
    ;               reduce using rule 40 (ListInstrucao -> Instrucao ListInstrucao .)
    ELSE            reduce using rule 40 (ListInstrucao -> Instrucao ListInstrucao .)


state 118

    (78) CicloFor -> FOR ( AtribuicaoInicial ExprCond . EndCond Atribuicao ) { ListInstrucao }
    (60) ExprCond -> ExprCond . ContinuacaoExprCond
    (80) EndCond -> . ;
    (62) ContinuacaoExprCond -> . & Cond
    (63) ContinuacaoExprCond -> . | Cond

    ;               shift and go to state 135
    &               shift and go to state 68
    |               shift and go to state 69

    EndCond                        shift and go to state 134
    ContinuacaoExprCond            shift and go to state 66

state 119

    (10) ContContinuacaoDeclaracao -> = Expr . ;
    (15) Expr -> Expr . ContinuacaoExpr
    (17) ContinuacaoExpr -> . + Term
    (18) ContinuacaoExpr -> . - Term

    ;               shift and go to state 136
    +               shift and go to state 77
    -               shift and go to state 78

    ContinuacaoExpr                shift and go to state 71

state 120

    (9) ContinuacaoDeclaracao -> Array ID ; .

    ID              reduce using rule 9 (ContinuacaoDeclaracao -> Array ID ; .)
    }               reduce using rule 9 (ContinuacaoDeclaracao -> Array ID ; .)


state 121

    (12) Array -> [ INT ] . ContArray
    (13) ContArray -> . [ INT ]
    (14) ContArray -> .

    [               shift and go to state 137
    ID              reduce using rule 14 (ContArray -> .)

    ContArray                      shift and go to state 138

state 122

    (37) Funcao -> DecFunc { Variaveis ListInstrucao Ret . }

    }               shift and go to state 139


state 123

    (39) Ret -> RET . Expr ;
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    Expr                           shift and go to state 140
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 124

    (51) ContContinuacaoVar -> [ . INT ]

    INT             shift and go to state 141


state 125

    (49) ContinuacaoVar -> [ INT ] ContContinuacaoVar .

    =               reduce using rule 49 (ContinuacaoVar -> [ INT ] ContContinuacaoVar .)
    ;               reduce using rule 49 (ContinuacaoVar -> [ INT ] ContContinuacaoVar .)


state 126

    (55) Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .

    FUNC            reduce using rule 55 (Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .)
    READ            reduce using rule 55 (Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .)
    WRITE           reduce using rule 55 (Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .)
    IF              reduce using rule 55 (Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .)
    ID              reduce using rule 55 (Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .)
    FOR             reduce using rule 55 (Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .)
    WHILE           reduce using rule 55 (Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .)
    REPEAT          reduce using rule 55 (Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .)
    $end            reduce using rule 55 (Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .)
    }               reduce using rule 55 (Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .)
    RET             reduce using rule 55 (Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .)
    ;               reduce using rule 55 (Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .)
    ELSE            reduce using rule 55 (Condicao -> IF ExprCond Do ListInstrucao ContinuacaoIf .)


state 127

    (56) ContinuacaoIf -> Else . ListInstrucao ;
    (40) ListInstrucao -> . Instrucao ListInstrucao
    (41) ListInstrucao -> .
    (42) Instrucao -> . Atribuicao
    (43) Instrucao -> . Leitura
    (44) Instrucao -> . Escrita
    (45) Instrucao -> . Condicao
    (46) Instrucao -> . Ciclo
    (47) Atribuicao -> . Var = Expr ;
    (53) Leitura -> . READ Var ;
    (54) Escrita -> . WRITE Var ;
    (55) Condicao -> . IF ExprCond Do ListInstrucao ContinuacaoIf
    (70) Ciclo -> . CicloWhile
    (71) Ciclo -> . CicloRepeat
    (72) Ciclo -> . CicloFor
    (48) Var -> . ID ContinuacaoVar
    (73) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (75) CicloRepeat -> . Repeat { ListInstrucao } Until ExprCond
    (78) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (74) While -> . WHILE
    (76) Repeat -> . REPEAT

    ;               reduce using rule 41 (ListInstrucao -> .)
    READ            shift and go to state 17
    WRITE           shift and go to state 18
    IF              shift and go to state 19
    ID              shift and go to state 15
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    REPEAT          shift and go to state 27

    ListInstrucao                  shift and go to state 142
    Instrucao                      shift and go to state 90
    Atribuicao                     shift and go to state 9
    Leitura                        shift and go to state 10
    Escrita                        shift and go to state 11
    Condicao                       shift and go to state 12
    Ciclo                          shift and go to state 13
    Var                            shift and go to state 16
    CicloWhile                     shift and go to state 20
    CicloRepeat                    shift and go to state 21
    CicloFor                       shift and go to state 22
    While                          shift and go to state 23
    Repeat                         shift and go to state 24

state 128

    (57) ContinuacaoIf -> ; .

    FUNC            reduce using rule 57 (ContinuacaoIf -> ; .)
    READ            reduce using rule 57 (ContinuacaoIf -> ; .)
    WRITE           reduce using rule 57 (ContinuacaoIf -> ; .)
    IF              reduce using rule 57 (ContinuacaoIf -> ; .)
    ID              reduce using rule 57 (ContinuacaoIf -> ; .)
    FOR             reduce using rule 57 (ContinuacaoIf -> ; .)
    WHILE           reduce using rule 57 (ContinuacaoIf -> ; .)
    REPEAT          reduce using rule 57 (ContinuacaoIf -> ; .)
    $end            reduce using rule 57 (ContinuacaoIf -> ; .)
    }               reduce using rule 57 (ContinuacaoIf -> ; .)
    RET             reduce using rule 57 (ContinuacaoIf -> ; .)
    ;               reduce using rule 57 (ContinuacaoIf -> ; .)
    ELSE            reduce using rule 57 (ContinuacaoIf -> ; .)


state 129

    (59) Else -> ELSE .

    READ            reduce using rule 59 (Else -> ELSE .)
    WRITE           reduce using rule 59 (Else -> ELSE .)
    IF              reduce using rule 59 (Else -> ELSE .)
    ID              reduce using rule 59 (Else -> ELSE .)
    FOR             reduce using rule 59 (Else -> ELSE .)
    WHILE           reduce using rule 59 (Else -> ELSE .)
    REPEAT          reduce using rule 59 (Else -> ELSE .)
    ;               reduce using rule 59 (Else -> ELSE .)


state 130

    (29) ContinuacaoFactor -> [ INT ] . ContContinuacaoFactor
    (31) ContContinuacaoFactor -> . [ INT ]
    (32) ContContinuacaoFactor -> .

    [               shift and go to state 143
    *               reduce using rule 32 (ContContinuacaoFactor -> .)
    /               reduce using rule 32 (ContContinuacaoFactor -> .)
    %               reduce using rule 32 (ContContinuacaoFactor -> .)
    EQUAL           reduce using rule 32 (ContContinuacaoFactor -> .)
    BIGGER          reduce using rule 32 (ContContinuacaoFactor -> .)
    BIGGEREQUAL     reduce using rule 32 (ContContinuacaoFactor -> .)
    SMALLER         reduce using rule 32 (ContContinuacaoFactor -> .)
    SMALLEREQUAL    reduce using rule 32 (ContContinuacaoFactor -> .)
    +               reduce using rule 32 (ContContinuacaoFactor -> .)
    -               reduce using rule 32 (ContContinuacaoFactor -> .)
    ;               reduce using rule 32 (ContContinuacaoFactor -> .)
    DO              reduce using rule 32 (ContContinuacaoFactor -> .)
    &               reduce using rule 32 (ContContinuacaoFactor -> .)
    |               reduce using rule 32 (ContContinuacaoFactor -> .)
    FUNC            reduce using rule 32 (ContContinuacaoFactor -> .)
    READ            reduce using rule 32 (ContContinuacaoFactor -> .)
    WRITE           reduce using rule 32 (ContContinuacaoFactor -> .)
    IF              reduce using rule 32 (ContContinuacaoFactor -> .)
    ID              reduce using rule 32 (ContContinuacaoFactor -> .)
    FOR             reduce using rule 32 (ContContinuacaoFactor -> .)
    WHILE           reduce using rule 32 (ContContinuacaoFactor -> .)
    REPEAT          reduce using rule 32 (ContContinuacaoFactor -> .)
    $end            reduce using rule 32 (ContContinuacaoFactor -> .)
    }               reduce using rule 32 (ContContinuacaoFactor -> .)
    RET             reduce using rule 32 (ContContinuacaoFactor -> .)
    ELSE            reduce using rule 32 (ContContinuacaoFactor -> .)

    ContContinuacaoFactor          shift and go to state 144

state 131

    (73) CicloWhile -> While ExprCond Do { ListInstrucao . }

    }               shift and go to state 145


state 132

    (75) CicloRepeat -> Repeat { ListInstrucao } Until . ExprCond
    (60) ExprCond -> . ExprCond ContinuacaoExprCond
    (61) ExprCond -> . Cond
    (64) Cond -> . Expr ContinuacaoCond
    (15) Expr -> . Expr ContinuacaoExpr
    (16) Expr -> . Term
    (19) Term -> . Term ContinuacaoTerm
    (20) Term -> . Factor
    (24) Factor -> . INT
    (25) Factor -> . - INT
    (26) Factor -> . FLOAT
    (27) Factor -> . - FLOAT
    (28) Factor -> . ID ContinuacaoFactor
    (33) Factor -> . CALL ID

    INT             shift and go to state 46
    -               shift and go to state 47
    FLOAT           shift and go to state 48
    ID              shift and go to state 49
    CALL            shift and go to state 50

    ExprCond                       shift and go to state 146
    Cond                           shift and go to state 42
    Expr                           shift and go to state 43
    Term                           shift and go to state 44
    Factor                         shift and go to state 45

state 133

    (77) Until -> UNTIL .

    INT             reduce using rule 77 (Until -> UNTIL .)
    -               reduce using rule 77 (Until -> UNTIL .)
    FLOAT           reduce using rule 77 (Until -> UNTIL .)
    ID              reduce using rule 77 (Until -> UNTIL .)
    CALL            reduce using rule 77 (Until -> UNTIL .)


state 134

    (78) CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond . Atribuicao ) { ListInstrucao }
    (47) Atribuicao -> . Var = Expr ;
    (48) Var -> . ID ContinuacaoVar

    ID              shift and go to state 15

    Atribuicao                     shift and go to state 147
    Var                            shift and go to state 16

state 135

    (80) EndCond -> ; .

    ID              reduce using rule 80 (EndCond -> ; .)


state 136

    (10) ContContinuacaoDeclaracao -> = Expr ; .

    ID              reduce using rule 10 (ContContinuacaoDeclaracao -> = Expr ; .)
    }               reduce using rule 10 (ContContinuacaoDeclaracao -> = Expr ; .)


state 137

    (13) ContArray -> [ . INT ]

    INT             shift and go to state 148


state 138

    (12) Array -> [ INT ] ContArray .

    ID              reduce using rule 12 (Array -> [ INT ] ContArray .)


state 139

    (37) Funcao -> DecFunc { Variaveis ListInstrucao Ret } .

    FUNC            reduce using rule 37 (Funcao -> DecFunc { Variaveis ListInstrucao Ret } .)
    READ            reduce using rule 37 (Funcao -> DecFunc { Variaveis ListInstrucao Ret } .)
    WRITE           reduce using rule 37 (Funcao -> DecFunc { Variaveis ListInstrucao Ret } .)
    IF              reduce using rule 37 (Funcao -> DecFunc { Variaveis ListInstrucao Ret } .)
    ID              reduce using rule 37 (Funcao -> DecFunc { Variaveis ListInstrucao Ret } .)
    FOR             reduce using rule 37 (Funcao -> DecFunc { Variaveis ListInstrucao Ret } .)
    WHILE           reduce using rule 37 (Funcao -> DecFunc { Variaveis ListInstrucao Ret } .)
    REPEAT          reduce using rule 37 (Funcao -> DecFunc { Variaveis ListInstrucao Ret } .)
    $end            reduce using rule 37 (Funcao -> DecFunc { Variaveis ListInstrucao Ret } .)


state 140

    (39) Ret -> RET Expr . ;
    (15) Expr -> Expr . ContinuacaoExpr
    (17) ContinuacaoExpr -> . + Term
    (18) ContinuacaoExpr -> . - Term

    ;               shift and go to state 149
    +               shift and go to state 77
    -               shift and go to state 78

    ContinuacaoExpr                shift and go to state 71

state 141

    (51) ContContinuacaoVar -> [ INT . ]

    ]               shift and go to state 150


state 142

    (56) ContinuacaoIf -> Else ListInstrucao . ;

    ;               shift and go to state 151


state 143

    (31) ContContinuacaoFactor -> [ . INT ]

    INT             shift and go to state 152


state 144

    (29) ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .

    *               reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    /               reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    %               reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    EQUAL           reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    BIGGER          reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    BIGGEREQUAL     reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    SMALLER         reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    SMALLEREQUAL    reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    +               reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    -               reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    ;               reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    DO              reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    &               reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    |               reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    FUNC            reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    READ            reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    WRITE           reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    IF              reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    ID              reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    FOR             reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    WHILE           reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    REPEAT          reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    $end            reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    }               reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    RET             reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)
    ELSE            reduce using rule 29 (ContinuacaoFactor -> [ INT ] ContContinuacaoFactor .)


state 145

    (73) CicloWhile -> While ExprCond Do { ListInstrucao } .

    FUNC            reduce using rule 73 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    READ            reduce using rule 73 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    WRITE           reduce using rule 73 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    IF              reduce using rule 73 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    ID              reduce using rule 73 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    FOR             reduce using rule 73 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    WHILE           reduce using rule 73 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    REPEAT          reduce using rule 73 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    $end            reduce using rule 73 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    }               reduce using rule 73 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    RET             reduce using rule 73 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    ;               reduce using rule 73 (CicloWhile -> While ExprCond Do { ListInstrucao } .)
    ELSE            reduce using rule 73 (CicloWhile -> While ExprCond Do { ListInstrucao } .)


state 146

    (75) CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .
    (60) ExprCond -> ExprCond . ContinuacaoExprCond
    (62) ContinuacaoExprCond -> . & Cond
    (63) ContinuacaoExprCond -> . | Cond

    FUNC            reduce using rule 75 (CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .)
    READ            reduce using rule 75 (CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .)
    WRITE           reduce using rule 75 (CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .)
    IF              reduce using rule 75 (CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .)
    ID              reduce using rule 75 (CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .)
    FOR             reduce using rule 75 (CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .)
    WHILE           reduce using rule 75 (CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .)
    REPEAT          reduce using rule 75 (CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .)
    $end            reduce using rule 75 (CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .)
    }               reduce using rule 75 (CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .)
    RET             reduce using rule 75 (CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .)
    ;               reduce using rule 75 (CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .)
    ELSE            reduce using rule 75 (CicloRepeat -> Repeat { ListInstrucao } Until ExprCond .)
    &               shift and go to state 68
    |               shift and go to state 69

    ContinuacaoExprCond            shift and go to state 66

state 147

    (78) CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao . ) { ListInstrucao }

    )               shift and go to state 153


state 148

    (13) ContArray -> [ INT . ]

    ]               shift and go to state 154


state 149

    (39) Ret -> RET Expr ; .

    }               reduce using rule 39 (Ret -> RET Expr ; .)


state 150

    (51) ContContinuacaoVar -> [ INT ] .

    =               reduce using rule 51 (ContContinuacaoVar -> [ INT ] .)
    ;               reduce using rule 51 (ContContinuacaoVar -> [ INT ] .)


state 151

    (56) ContinuacaoIf -> Else ListInstrucao ; .

    FUNC            reduce using rule 56 (ContinuacaoIf -> Else ListInstrucao ; .)
    READ            reduce using rule 56 (ContinuacaoIf -> Else ListInstrucao ; .)
    WRITE           reduce using rule 56 (ContinuacaoIf -> Else ListInstrucao ; .)
    IF              reduce using rule 56 (ContinuacaoIf -> Else ListInstrucao ; .)
    ID              reduce using rule 56 (ContinuacaoIf -> Else ListInstrucao ; .)
    FOR             reduce using rule 56 (ContinuacaoIf -> Else ListInstrucao ; .)
    WHILE           reduce using rule 56 (ContinuacaoIf -> Else ListInstrucao ; .)
    REPEAT          reduce using rule 56 (ContinuacaoIf -> Else ListInstrucao ; .)
    $end            reduce using rule 56 (ContinuacaoIf -> Else ListInstrucao ; .)
    }               reduce using rule 56 (ContinuacaoIf -> Else ListInstrucao ; .)
    RET             reduce using rule 56 (ContinuacaoIf -> Else ListInstrucao ; .)
    ;               reduce using rule 56 (ContinuacaoIf -> Else ListInstrucao ; .)
    ELSE            reduce using rule 56 (ContinuacaoIf -> Else ListInstrucao ; .)


state 152

    (31) ContContinuacaoFactor -> [ INT . ]

    ]               shift and go to state 155


state 153

    (78) CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) . { ListInstrucao }

    {               shift and go to state 156


state 154

    (13) ContArray -> [ INT ] .

    ID              reduce using rule 13 (ContArray -> [ INT ] .)


state 155

    (31) ContContinuacaoFactor -> [ INT ] .

    *               reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    /               reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    %               reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    EQUAL           reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    BIGGER          reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    BIGGEREQUAL     reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    SMALLER         reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    SMALLEREQUAL    reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    +               reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    -               reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    ;               reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    DO              reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    &               reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    |               reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    FUNC            reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    READ            reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    WRITE           reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    IF              reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    ID              reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    FOR             reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    WHILE           reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    REPEAT          reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    $end            reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    }               reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    RET             reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)
    ELSE            reduce using rule 31 (ContContinuacaoFactor -> [ INT ] .)


state 156

    (78) CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { . ListInstrucao }
    (40) ListInstrucao -> . Instrucao ListInstrucao
    (41) ListInstrucao -> .
    (42) Instrucao -> . Atribuicao
    (43) Instrucao -> . Leitura
    (44) Instrucao -> . Escrita
    (45) Instrucao -> . Condicao
    (46) Instrucao -> . Ciclo
    (47) Atribuicao -> . Var = Expr ;
    (53) Leitura -> . READ Var ;
    (54) Escrita -> . WRITE Var ;
    (55) Condicao -> . IF ExprCond Do ListInstrucao ContinuacaoIf
    (70) Ciclo -> . CicloWhile
    (71) Ciclo -> . CicloRepeat
    (72) Ciclo -> . CicloFor
    (48) Var -> . ID ContinuacaoVar
    (73) CicloWhile -> . While ExprCond Do { ListInstrucao }
    (75) CicloRepeat -> . Repeat { ListInstrucao } Until ExprCond
    (78) CicloFor -> . FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao }
    (74) While -> . WHILE
    (76) Repeat -> . REPEAT

    }               reduce using rule 41 (ListInstrucao -> .)
    READ            shift and go to state 17
    WRITE           shift and go to state 18
    IF              shift and go to state 19
    ID              shift and go to state 15
    FOR             shift and go to state 25
    WHILE           shift and go to state 26
    REPEAT          shift and go to state 27

    Atribuicao                     shift and go to state 9
    ListInstrucao                  shift and go to state 157
    Instrucao                      shift and go to state 90
    Leitura                        shift and go to state 10
    Escrita                        shift and go to state 11
    Condicao                       shift and go to state 12
    Ciclo                          shift and go to state 13
    Var                            shift and go to state 16
    CicloWhile                     shift and go to state 20
    CicloRepeat                    shift and go to state 21
    CicloFor                       shift and go to state 22
    While                          shift and go to state 23
    Repeat                         shift and go to state 24

state 157

    (78) CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao . }

    }               shift and go to state 158


state 158

    (78) CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .

    FUNC            reduce using rule 78 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    READ            reduce using rule 78 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    WRITE           reduce using rule 78 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    IF              reduce using rule 78 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    ID              reduce using rule 78 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    FOR             reduce using rule 78 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    WHILE           reduce using rule 78 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    REPEAT          reduce using rule 78 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    $end            reduce using rule 78 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    }               reduce using rule 78 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    RET             reduce using rule 78 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    ;               reduce using rule 78 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)
    ELSE            reduce using rule 78 (CicloFor -> FOR ( AtribuicaoInicial ExprCond EndCond Atribuicao ) { ListInstrucao } .)

